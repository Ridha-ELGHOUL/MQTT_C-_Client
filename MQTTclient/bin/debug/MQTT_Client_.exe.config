

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.abstractions</name>
    </assembly>
    <members>
        <member name="T:Xunit.Abstractions.ISourceInformation">
            <summary>
            Represents source information about a test case.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IXunitSerializable">
            <summary>
            Interface implement by objects that want to support serialization in xUnit.net.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.IXunitSerializable.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <summary>
            Called when the object should populate itself with data from the serialization info.
            </summary>
            <param name="info">The info to get the data from</param>
        </member>
        <member name="M:Xunit.Abstractions.IXunitSerializable.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <summary>
            Called when the object should store its data into the serialization info.
            </summary>
            <param name="info">The info to store the data in</param>
        </member>
        <member name="P:Xunit.Abstractions.ISourceInformation.FileName">
            <summary>
            Gets or sets the source file name. A <c>null</c> value indicates that the
            source file name is not known.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ISourceInformation.LineNumber">
            <summary>
            Gets or sets the source file line. A <c>null</c> value indicates that the
            source file line is not known.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ISourceInformationProvider">
            <summary>
            Represents a provider which gives source line information for a test case. Generally
            consumed by an implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> during Find operations.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.ISourceInformationProvider.GetSourceInformation(Xunit.Abstractions.ITestCase)">
            <summary>
            Returns the source information for a test case.
            </summary>
            <param name="testCase">The test case to retrieve information for.</param>
            <returns>The source information, with null string and int values when the information is not available.
            Note: return value should never be <c>null</c>, only the interior data values inside.</returns>
        </member>
        <member name="T:Xunit.Abstractions.ITestFramework">
            <summary>
            Represents a test framework. There are two pieces to test frameworks: discovery and
            execution. The two factory methods represent these two pieces. Test frameworks can
            implement an empty constructor, or they can implement one that takes <see cref="T:Xunit.Abstractions.IMessageSink"/>
            if they want to be able to send diagnostic messages.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.ITestFramework.GetDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Get a test discoverer.
            </summary>
            <param name="assembly">The assembly from which to discover the tests.</param>
            <returns>The test discoverer.</returns>
        </member>
        <member name="M:Xunit.Abstractions.ITestFramework.GetExecutor(System.Reflection.AssemblyName)">
            <summary>
            Get a test executor.
            </summary>
            <param name="assemblyName">The name of the assembly to run tests from.</param>
            <returns>The test executor.</returns>
        </member>
        <member name="P:Xunit.Abstractions.ITestFramework.SourceInformationProvider">
            <summary>
            Sets the source information provider to be used during discovery.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestFrameworkDiscoverer">
            <summary>
            Represents an implementation of the discovery part of a test framework.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.ITestFrameworkDiscoverer.Find(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Starts the process of finding all tests in an assembly.
            </summary>
            <param name="includeSourceInformation">Whether to include source file information, if possible.</param>
            <param name="discoveryMessageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
        </member>
        <member name="M:Xunit.Abstractions.ITestFrameworkDiscoverer.Find(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Starts the process of finding all tests in a class.
            </summary>
            <param name="typeName">The fully qualified type name to find tests in.</param>
            <param name="includeSourceInformation">Whether to include source file information, if possible.</param>
            <param name="discoveryMessageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
        </member>
        <member name="M:Xunit.Abstractions.ITestFrameworkDiscoverer.Serialize(Xunit.Abstractions.ITestCase)">
            <summary>
            Serializes a test case into string form.
            </summary>
            <param name="testCase">The test case to be serialized.</param>
            <returns>The serialized representation of the test case.</returns>
        </member>
        <member name="P:Xunit.Abstractions.ITestFrameworkDiscoverer.TargetFramework">
            <summary>
            Gets the target framework that the test assembly is linked against.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestFrameworkDiscoverer.TestFrameworkDisplayName">
            <summary>
            Returns the display name of the test framework that this discoverer is running tests for.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestFrameworkDiscoveryOptions">
            <summary>
            Represents an instance of <see cref="T:Xunit.Abstractions.ITestFrameworkOptions"/> that is to be used for
            test discovery purposes.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestFrameworkOptions">
            <summary>
            This interface should not be consumed directly; instead, you should
            consume <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoveryOptions"/>
            or <see cref="T:Xunit.Abstractions.ITestFrameworkExecutionOptions"/>.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.ITestFrameworkOptions.GetValue``1(System.String)">
            <summary>
            Gets an option value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Xunit.Abstractions.ITestFrameworkOptions.SetValue``1(System.String,``0)">
            <summary>
            Sets an option value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the value.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="T:Xunit.Abstractions.ITestFrameworkExecutionOptions">
            <summary>
            Represents an instance of <see cref="T:Xunit.Abstractions.ITestFrameworkOptions"/> that is to be used for
            test execution purposes.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestFrameworkExecutor">
            <summary>
            Represents an implementation of the execution part of a test framework.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.ITestFrameworkExecutor.Deserialize(System.String)">
            <summary>
            De-serializes a test case.
            </summary>
            <param name="value">The string representation of the test case.</param>
            <returns>The de-serialized test case.</returns>
        </member>
        <member name="M:Xunit.Abstractions.ITestFrameworkExecutor.RunAll(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Starts the process of running all the tests in the assembly.
            </summary>
            <param name="executionMessageSink">The message sink to report results back to.</param>
            <param name="discoveryOptions">The options to be used during test discovery.</param>
            <param name="executionOptions">The options to be used during test execution.</param>
        </member>
        <member name="M:Xunit.Abstractions.ITestFrameworkExecutor.RunTests(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Starts the process of running selected tests in the assembly.
            </summary>
            <param name="testCases">The test cases to run.</param>
            <param name="executionMessageSink">The message sink to report results back to.</param>
            <param name="executionOptions">The options to be used during test execution.</param>
        </member>
        <member name="T:Xunit.Abstractions.IExecutionMessage">
            <summary>
            Base message interface for all messages related to test execution. It includes the list
            of test cases that are associated with this execution step.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IMessageSinkMessage">
            <summary>
            This is the base interface for all test messages. A test message is a message that is
            used to communicate the status of discovery and execution of tests. 
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IExecutionMessage.TestCases">
            <summary>
            The test cases that are associated with this message.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IFailureInformation">
            <summary>
            This represents failure information for the test runner. It encapsulates multiple sets
            of exceptions so that it can provide inner exception information, including support for
            <see cref="T:System.AggregateException"/>. The parent indices indicate the hierarchy of the exceptions
            as extracted during the failure; the 0th exception is always the single parent of the tree,
            and will have an index of -1.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IFailureInformation.ExceptionTypes">
            <summary>
            The fully-qualified type name of the exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IFailureInformation.Messages">
            <summary>
            The messages of the exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IFailureInformation.StackTraces">
            <summary>
            The stack traces of the exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IFailureInformation.ExceptionParentIndices">
            <summary>
            The parent exception index for the exceptions; a -1 indicates that
            the exception in question has no parent.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IFinishedMessage">
            <summary>
            This is the base message for various types of completion that can occur during the
            various phases of execution process (e.g.,  test case, test class, test collection,
            and assembly).
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IFinishedMessage.ExecutionTime">
            <summary>
            The execution time (in seconds) for this execution.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IFinishedMessage.TestsFailed">
            <summary>
            The number of failing tests.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IFinishedMessage.TestsRun">
            <summary>
            The total number of tests run.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IFinishedMessage.TestsSkipped">
            <summary>
            The number of skipped tests.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IMessageSink">
            <summary>
            Represents an endpoint for the reception of test messages.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.IMessageSink.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary>
            Reports the presence of a message on the message bus. This method should
            never throw exceptions.
            </summary>
            <param name="message">The message from the message bus</param>
            <returns>Return <c>true</c> to continue running tests, or <c>false</c> to stop.</returns>
        </member>
        <member name="T:Xunit.Abstractions.ITestAssemblyMessage">
            <summary>
            Base message interface for all messages related to test assemblies.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestAssemblyMessage.TestAssembly">
            <summary>
            The test assembly that is associated with this message.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCaseMessage">
            <summary>
            Base message interface for all messages related to test cases.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestMethodMessage">
            <summary>
            Base message interface for all messages related to test methods.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestClassMessage">
            <summary>
            Base message interface for all messages related to test classes.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCollectionMessage">
            <summary>
            Base message interface for all messages related to test collections.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCollectionMessage.TestCollection">
            <summary>
            The test collection that is associated with this message.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestClassMessage.TestClass">
            <summary>
            The test class that is associated with this message.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestMethodMessage.TestMethod">
            <summary>
            The test method that is associated with this message.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCaseMessage.TestCase">
            <summary>
            The test case that is associated with this message.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestMessage">
            <summary>
            Base message interface for all messages related to tests.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestMessage.Test">
            <summary>
            The test that is associated with this message.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestResultMessage">
            <summary>
            This is the base interface for all individual test results (e.g., tests which
            pass, fail, or are skipped).
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestResultMessage.ExecutionTime">
            <summary>
            The execution time of the test, in seconds.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestResultMessage.Output">
            <summary>
            The captured output of the test.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IAfterTestFinished">
            <summary>
            This message is sent during execution to indicate that the After method of
            a <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> has completed executing.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IAfterTestFinished.AttributeName">
            <summary>
            The fully qualified type name of the <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IAfterTestStarting">
            <summary>
            This message is sent during execution to indicate that the After method of
            a <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> is about to execute.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IAfterTestStarting.AttributeName">
            <summary>
            The fully qualified type name of the <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IBeforeTestFinished">
            <summary>
            This message is sent during execution to indicate that the Before method of
            a <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> has completed executing.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IBeforeTestFinished.AttributeName">
            <summary>
            The fully qualified type name of the <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IBeforeTestStarting">
            <summary>
            This message is sent during execution to indicate that the Before method of
            a <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> is about to execute.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IBeforeTestStarting.AttributeName">
            <summary>
            The fully qualified type name of the <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IDiagnosticMessage">
            <summary>
            This message is sent when the test framework wants to report a diagnostic message
            to the end user.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IDiagnosticMessage.Message">
            <summary>
            Gets the diagnostic message.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IDiscoveryCompleteMessage">
            <summary>
            This message indicates that the discovery process has been completed for
            the requested assembly.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IErrorMessage">
            <summary>
            This message indicates that an error has occurred in the execution process. 
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestAssemblyCleanupFailure">
            <summary>
            This message indicates that an error has occurred in test assembly cleanup. 
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestAssemblyFinished">
            <summary>
            This message indicates that the execution process has been completed for
            the requested assembly.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestAssemblyStarting">
            <summary>
            This message indicates that the execution process is about to start for 
            the requested assembly.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestAssemblyStarting.StartTime">
            <summary>
            Gets the local date and time when the test assembly execution began.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestAssemblyStarting.TestEnvironment">
            <summary>
            Gets a display string that describes the test execution environment.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestAssemblyStarting.TestFrameworkDisplayName">
            <summary>
            Gets a display string which describes the test framework and version number.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCaseCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test case cleanup. 
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCaseDiscoveryMessage">
            <summary>
            This message indicates that a test case had been found during the discovery process.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCaseFinished">
            <summary>
            This message indicates that a test case has finished executing.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCaseStarting">
            <summary>
            This message indicates that a test case is about to start executing.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestClassCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test class cleanup. 
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestClassConstructionFinished">
            <summary>
            This message indicates that an instance of a test class has just been constructed.
            Instance (non-static) methods of tests get a new instance of the test class for each
            individual test execution; static methods do not get an instance of the test class.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestClassConstructionStarting">
            <summary>
            This message indicates that an instance of a test class is about to be constructed.
            Instance (non-static) methods of tests get a new instance of the test class for each
            individual test execution; static methods do not get an instance of the test class.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestClassDisposeFinished">
            <summary>
            This message indicates that the <see cref="M:System.IDisposable.Dispose"/> method was
            just called on the test class for the test case that just finished executing.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestClassDisposeStarting">
            <summary>
            This message indicates that the <see cref="M:System.IDisposable.Dispose"/> method is
            about to be called on the test class for the test case that just finished executing.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestClassFinished">
            <summary>
            This message indicates that a test class has finished executing (meaning, all of the
            test cases in this test class have finished running).
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestClassStarting">
            <summary>
            This message indicates that a test class is about to begin running.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test cleanup. 
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCollectionCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test collection cleanup. 
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCollectionFinished">
            <summary>
            This message indicates that a test collection has just finished executing (meaning,
            all the test classes in the collection has finished).
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCollectionStarting">
            <summary>
            This message indicates that a test collection has is about to start executing.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestFailed">
            <summary>
            This message indicates that a test has failed.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestFinished">
            <summary>
            This message indicates that a test has finished executing.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestFinished.ExecutionTime">
            <summary>
            Gets the time spent executing the test, in seconds.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestFinished.Output">
            <summary>
            The captured output of the test.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestMethodCleanupFailure">
            <summary>
            This message indicates that an error has occurred during test method cleanup. 
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestMethodFinished">
            <summary>
            This message indicates that a test method has finished executing (meaning, all
            the test cases that derived from the test method have finished).
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestMethodStarting">
            <summary>
            This message indicates that a test method is about to begin executing.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestOutput">
            <summary>
            This message indicates that a line of output was provided for a test.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestOutput.Output">
            <summary>
            Gets the line of output.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestPassed">
            <summary>
            Indicates that a test has passed.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestSkipped">
            <summary>
            This message indicates that a test was skipped.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestSkipped.Reason">
            <summary>
            The reason given for skipping the test.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestStarting">
            <summary>
            This message indicates that a test is about to start executing.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IAssemblyInfo">
            <summary>
            Represents information about an assembly. The primary implementation is based on runtime
            reflection, but may also be implemented by runner authors to provide non-reflection-based
            test discovery (for example, AST-based runners like CodeRush or Resharper).
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.IAssemblyInfo.GetCustomAttributes(System.String)">
            <summary>
            Gets all the custom attributes for the given assembly.
            </summary>
            <param name="assemblyQualifiedAttributeTypeName">The type of the attribute, in assembly-qualified form</param>
            <returns>The matching attributes that decorate the assembly</returns>
        </member>
        <member name="M:Xunit.Abstractions.IAssemblyInfo.GetType(System.String)">
            <summary>
            Gets a <see cref="T:Xunit.Abstractions.ITypeInfo"/> for the given type.
            </summary>
            <param name="typeName">The fully qualified type name.</param>
            <returns>The <see cref="T:Xunit.Abstractions.ITypeInfo"/> if the type exists, or <c>null</c> if not.</returns>
        </member>
        <member name="M:Xunit.Abstractions.IAssemblyInfo.GetTypes(System.Boolean)">
            <summary>
            Gets all the types for the assembly.
            </summary>
            <param name="includePrivateTypes">Set to <c>true</c> to return all types in the assembly,
            or <c>false</c> to return only public types.</param>
            <returns>The types in the assembly.</returns>
        </member>
        <member name="P:Xunit.Abstractions.IAssemblyInfo.AssemblyPath">
            <summary>
            Gets the on-disk location of the assembly under test. If the assembly path is not
            known (for example, in AST-based runners), you must return <c>null</c>.
            </summary>
            <remarks>
            This is used by the test framework wrappers to find the co-located unit test framework
            assembly (f.e., xunit.dll or xunit.execution.dll). AST-based runners will need to directly create
            instances of <see cref="T:Xunit.Xunit1"/> and <see cref="T:Xunit.Xunit2"/> (using the constructors that
            support an explicit path to the test framework DLL) rather than relying on the
            use of <see cref="T:Xunit.XunitFrontController"/>.
            </remarks>
        </member>
        <member name="P:Xunit.Abstractions.IAssemblyInfo.Name">
            <summary>
            Gets the assembly name. May return a fully qualified name for assemblies found via
            reflection (i.e., "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"),
            or may return just assembly name only for assemblies found via source code introspection
            (i.e., "mscorlib").
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IAttributeInfo">
            <summary>
            Represents information about an attribute. The primary implementation is based on runtime
            reflection, but may also be implemented by runner authors to provide non-reflection-based
            test discovery (for example, AST-based runners like CodeRush or Resharper).
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.IAttributeInfo.GetConstructorArguments">
            <summary>
            Gets the arguments passed to the constructor.
            </summary>
            <returns>The constructor arguments, in order</returns>
        </member>
        <member name="M:Xunit.Abstractions.IAttributeInfo.GetCustomAttributes(System.String)">
            <summary>
            Gets all the custom attributes for the given attribute.
            </summary>
            <param name="assemblyQualifiedAttributeTypeName">The type of the attribute to find, in assembly-qualified form</param>
            <returns>The matching attributes that decorate the attribute</returns>
        </member>
        <member name="M:Xunit.Abstractions.IAttributeInfo.GetNamedArgument``1(System.String)">
            <summary>
            Gets a named-argument initialized value of the attribute. If there is no named argument for the given name
            on this attribute, then returns default(TValue).
            </summary>
            <typeparam name="TValue">The type of the argument</typeparam>
            <param name="argumentName">The name of the argument</param>
            <returns>The argument value</returns>
        </member>
        <member name="T:Xunit.Abstractions.IMethodInfo">
            <summary>
            Represents information about a method. The primary implementation is based on runtime
            reflection, but may also be implemented by runner authors to provide non-reflection-based
            test discovery (for example, AST-based runners like CodeRush or Resharper).
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.IMethodInfo.GetCustomAttributes(System.String)">
            <summary>
            Gets all the custom attributes for the method that are of the given type.
            </summary>
            <param name="assemblyQualifiedAttributeTypeName">The type of the attribute, in assembly qualified form</param>
            <returns>The matching attributes that decorate the method</returns>
        </member>
        <member name="M:Xunit.Abstractions.IMethodInfo.GetGenericArguments">
            <summary>
            Gets the types of the generic arguments for generic methods.
            </summary>
            <returns>The argument types.</returns>
        </member>
        <member name="M:Xunit.Abstractions.IMethodInfo.GetParameters">
            <summary>
            Gets information about the parameters to the method.
            </summary>
            <returns>The method's parameters.</returns>
        </member>
        <member name="M:Xunit.Abstractions.IMethodInfo.MakeGenericMethod(Xunit.Abstractions.ITypeInfo[])">
            <summary>
            Converts an open generic method into a closed generic method, using the provided type arguments.
            </summary>
            <param name="typeArguments">The type arguments to be used in the generic definition.</param>
            <returns>A new <see cref="T:Xunit.Abstractions.IMethodInfo"/> that represents the closed generic method.</returns>
        </member>
        <member name="P:Xunit.Abstractions.IMethodInfo.IsAbstract">
            <summary>
            Gets a value indicating whether the method is abstract.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IMethodInfo.IsGenericMethodDefinition">
            <summary>
            Gets a value indicating whether the method is a generic definition (i.e., an open generic).
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IMethodInfo.IsPublic">
            <summary>
            Gets a value indicating whether the method is public.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IMethodInfo.IsStatic">
            <summary>
            Gets a value indicating whether the method is static.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IMethodInfo.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IMethodInfo.ReturnType">
            <summary>
            Gets the fully qualified type name of the return type.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IMethodInfo.Type">
            <summary>
            Gets a value which represents the class that this method was
            reflected from (i.e., equivalent to MethodInfo.ReflectedType)
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IParameterInfo">
            <summary>
            Represents information about a method parameter. The primary implementation is based on runtime
            reflection, but may also be implemented by runner authors to provide non-reflection-based
            test discovery (for example, AST-based runners like CodeRush or Resharper).
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IParameterInfo.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IParameterInfo.ParameterType">
            <summary>
            Gets the type of the parameter.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IReflectionAssemblyInfo">
            <summary>
            Represents a reflection-backed implementation of <see cref="T:Xunit.Abstractions.IAssemblyInfo"/>.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IReflectionAssemblyInfo.Assembly">
            <summary>
            Gets the underlying <see cref="P:Xunit.Abstractions.IReflectionAssemblyInfo.Assembly"/> for the assembly.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IReflectionAttributeInfo">
            <summary>
            Represents a reflection-backed implementation of <see cref="T:Xunit.Abstractions.IAttributeInfo"/>.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IReflectionAttributeInfo.Attribute">
            <summary>
            Gets the instance of the attribute, if available.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IReflectionMethodInfo">
            <summary>
            Represents a reflection-backed implementation of <see cref="T:Xunit.Abstractions.IMethodInfo"/>.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IReflectionMethodInfo.MethodInfo">
            <summary>
            Gets the underlying <see cref="P:Xunit.Abstractions.IReflectionMethodInfo.MethodInfo"/> for the method.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IReflectionParameterInfo">
            <summary>
            Represents a reflection-backed implementation of <see cref="T:Xunit.Abstractions.IParameterInfo"/>.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IReflectionParameterInfo.ParameterInfo">
            <summary>
            Gets the underlying <see cref="P:Xunit.Abstractions.IReflectionParameterInfo.ParameterInfo"/> for the parameter.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IReflectionTypeInfo">
            <summary>
            Represents a reflection-backed implementation of <see cref="T:Xunit.Abstractions.ITypeInfo"/>.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITypeInfo">
            <summary>
            Represents information about a type. The primary implementation is based on runtime
            reflection, but may also be implemented by runner authors to provide non-reflection-based
            test discovery (for example, AST-based runners like CodeRush or Resharper).
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.ITypeInfo.GetCustomAttributes(System.String)">
            <summary>
            Gets all the custom attributes for the given type.
            </summary>
            <param name="assemblyQualifiedAttributeTypeName">The type of the attribute, in assembly qualified form</param>
            <returns>The matching attributes that decorate the type</returns>
        </member>
        <member name="M:Xunit.Abstractions.ITypeInfo.GetGenericArguments">
            <summary>
            Gets the generic type arguments for a generic type.
            </summary>
            <returns>The list of generic types.</returns>
        </member>
        <member name="M:Xunit.Abstractions.ITypeInfo.GetMethod(System.String,System.Boolean)">
            <summary>
            Gets a specific method.
            </summary>
            <param name="methodName">The name of the method.</param>
            <param name="includePrivateMethod">Set to <c>true</c> to look for the method in both public and private.</param>
            <returns>The method.</returns>
        </member>
        <member name="M:Xunit.Abstractions.ITypeInfo.GetMethods(System.Boolean)">
            <summary>
            Gets all the methods in this type.
            </summary>
            <param name="includePrivateMethods">Set to <c>true</c> to return all methods in the type,
            or <c>false</c> to return only public methods.</param>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.Assembly">
            <summary>
            Gets the assembly this type is located in.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.BaseType">
            <summary>
            Gets the base type of the given type.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.Interfaces">
            <summary>
            Gets the interfaces implemented by the given type.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.IsAbstract">
            <summary>
            Gets a value indicating whether the type is abstract.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.IsGenericParameter">
            <summary>
            Gets a value indicating whether the type represents a generic parameter.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.IsGenericType">
            <summary>
            Gets a value indicating whether the type is a generic type.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.IsSealed">
            <summary>
            Gets a value indicating whether the type is sealed.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.IsValueType">
            <summary>
            Gets a value indicating whether the type is a value type.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITypeInfo.Name">
            <summary>
            Gets the fully qualified type name (for non-generic parameters), or the
            simple type name (for generic parameters).
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.IReflectionTypeInfo.Type">
            <summary>
            Gets the underlying <see cref="P:Xunit.Abstractions.IReflectionTypeInfo.Type"/> object.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.IXunitSerializationInfo">
            <summary>
            Represents serialization support in xUnit.net.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.IXunitSerializationInfo.AddValue(System.String,System.Object,System.Type)">
            <summary>
            Adds a value to the serialization. Supported value types include the built-in
            intrinsics (string, int, long, float, double, and decimal, including nullable
            versions of those), any class which implements <see cref="T:Xunit.Abstractions.IXunitSerializable"/>),
            or arrays of any supported types.
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
            <param name="type">The optional type of the value</param>
        </member>
        <member name="M:Xunit.Abstractions.IXunitSerializationInfo.GetValue(System.String,System.Type)">
            <summary>
            Gets a value from the serialization.
            </summary>
            <param name="key">The key</param>
            <param name="type">The type of the value</param>
            <returns>The value, if present; <c>null</c>, otherwise</returns>
        </member>
        <member name="M:Xunit.Abstractions.IXunitSerializationInfo.GetValue``1(System.String)">
            <summary>
            Gets a value from the serialization.
            </summary>
            <param name="key">The key</param>
            <returns>The value, if present; default(T), otherwise</returns>
        </member>
        <member name="T:Xunit.Abstractions.ITest">
            <summary>
            Represents a single test in the system. A test case typically contains only a single test,
            but may contain many if circumstances warrant it (for example, test data for a theory cannot
            be pre-enumerated, so the theory yields a single test case with multiple tests).
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITest.DisplayName">
            <summary>
            Gets the display name of the test.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITest.TestCase">
            <summary>
            Gets the test case this test belongs to.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestAssembly">
            <summary>
            Represents a test assembly.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestAssembly.Assembly">
            <summary>
            Gets the assembly that this test assembly belongs to.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestAssembly.ConfigFileName">
            <summary>
            Gets the full path of the configuration file name, if one is present.
            May be <c>null</c> if there is no configuration file.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCase">
            <summary>
            Represents a single test case in the system. This test case usually represents a single test, but in
            the case of dynamically generated data for data driven tests, the test case may actually return
            multiple results when run.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCase.DisplayName">
            <summary>
            Gets the display name of the test case.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCase.SkipReason">
            <summary>
            Gets the display text for the reason a test is being skipped; if the test
            is not skipped, returns null.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCase.SourceInformation">
            <summary>
            Get or sets the source file name and line where the test is defined, if requested (and known).
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCase.TestMethod">
            <summary>
            Gets the test method this test case belongs to.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCase.TestMethodArguments">
            <summary>
            Gets the arguments that will be passed to the test method.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCase.Traits">
            <summary>
            Gets the trait values associated with this test case. If
            there are none, or the framework does not support traits,
            this should return an empty dictionary (not <c>null</c>). This
            dictionary must be treated as read-only.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCase.UniqueID">
            <summary>
            Gets a unique identifier for the test case.
            </summary>
            <remarks>
            The unique identifier for a test case should be able to discriminate
            among test cases, even those which are varied invocations against the
            same test method (i.e., theories). Ideally, this identifier would remain
            stable until such time as the developer changes some fundamental part
            of the identity (assembly, class name, test name, or test data); however,
            the minimum stability of the identifier must at least extend across
            multiple discoveries of the same test in the same (non-recompiled)
            assembly.
            </remarks>
        </member>
        <member name="T:Xunit.Abstractions.ITestClass">
            <summary>
            Represents a test class.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestClass.Class">
            <summary>
            Gets the class that this test case is attached to.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestClass.TestCollection">
            <summary>
            Gets the test collection this test case belongs to.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestCollection">
            <summary>
            Represents a group of test cases. Test collections form the basis of the parallelization in
            xUnit.net. Test cases which are in the same test collection will not be run in parallel
            against sibling tests, but will run in parallel against tests in other collections.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCollection.CollectionDefinition">
            <summary>
            Gets the type that the test collection was defined with, if available; may be <c>null</c>
            if the test collection didn't have a definition type.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCollection.DisplayName">
            <summary>
            Gets the display name of the test collection.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCollection.TestAssembly">
            <summary>
            Gets the test assembly this test collection belongs to.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestCollection.UniqueID">
            <summary>
            Gets the test collection ID. Test collection equality is determined by comparing IDs.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestMethod">
            <summary>
            Represents a test method.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestMethod.Method">
            <summary>
            Gets the method associated with this test method.
            </summary>
        </member>
        <member name="P:Xunit.Abstractions.ITestMethod.TestClass">
            <summary>
            Gets the test class that this test method belongs to.
            </summary>
        </member>
        <member name="T:Xunit.Abstractions.ITestOutputHelper">
            <summary>
            Represents a class which can be used to provide test output.
            </summary>
        </member>
        <member name="M:Xunit.Abstractions.ITestOutputHelper.WriteLine(System.String)">
            <summary>
            Adds a line of text to the output.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Xunit.Abstractions.ITestOutputHelper.WriteLine(System.String,System.Object[])">
            <summary>
            Formats a line of text and adds it to the output.
            </summary>
            <param name="format">The message format</param>
            <param name="args">The format arguments</param>
        </member>
    </members>
</doc>


<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.assert</name>
    </assembly>
    <members>
        <member name="T:Xunit.Assert">
            <summary>
            Contains various static methods that are used to verify that conditions are met during the
            process of running tests.
            </summary>
        </member>
        <member name="M:Xunit.Assert.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Assert"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Assert.Equals(System.Object,System.Object)">
            <summary>Do not call this method.</summary>
        </member>
        <member name="M:Xunit.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>Do not call this method.</summary>
        </member>
        <member name="M:Xunit.Assert.False(System.Boolean)">
            <summary>
            Verifies that the condition is false.
            </summary>
            <param name="condition">The condition to be tested</param>
            <exception cref="T:Xunit.Sdk.FalseException">Thrown if the condition is not false</exception>
        </member>
        <member name="M:Xunit.Assert.False(System.Nullable{System.Boolean})">
            <summary>
            Verifies that the condition is false.
            </summary>
            <param name="condition">The condition to be tested</param>
            <exception cref="T:Xunit.Sdk.FalseException">Thrown if the condition is not false</exception>
        </member>
        <member name="M:Xunit.Assert.False(System.Boolean,System.String)">
            <summary>
            Verifies that the condition is false.
            </summary>
            <param name="condition">The condition to be tested</param>
            <param name="userMessage">The message to show when the condition is not false</param>
            <exception cref="T:Xunit.Sdk.FalseException">Thrown if the condition is not false</exception>
        </member>
        <member name="M:Xunit.Assert.False(System.Nullable{System.Boolean},System.String)">
            <summary>
            Verifies that the condition is false.
            </summary>
            <param name="condition">The condition to be tested</param>
            <param name="userMessage">The message to show when the condition is not false</param>
            <exception cref="T:Xunit.Sdk.FalseException">Thrown if the condition is not false</exception>
        </member>
        <member name="M:Xunit.Assert.True(System.Boolean)">
            <summary>
            Verifies that an expression is true.
            </summary>
            <param name="condition">The condition to be inspected</param>
            <exception cref="T:Xunit.Sdk.TrueException">Thrown when the condition is false</exception>
        </member>
        <member name="M:Xunit.Assert.True(System.Nullable{System.Boolean})">
            <summary>
            Verifies that an expression is true.
            </summary>
            <param name="condition">The condition to be inspected</param>
            <exception cref="T:Xunit.Sdk.TrueException">Thrown when the condition is false</exception>
        </member>
        <member name="M:Xunit.Assert.True(System.Boolean,System.String)">
            <summary>
            Verifies that an expression is true.
            </summary>
            <param name="condition">The condition to be inspected</param>
            <param name="userMessage">The message to be shown when the condition is false</param>
            <exception cref="T:Xunit.Sdk.TrueException">Thrown when the condition is false</exception>
        </member>
        <member name="M:Xunit.Assert.True(System.Nullable{System.Boolean},System.String)">
            <summary>
            Verifies that an expression is true.
            </summary>
            <param name="condition">The condition to be inspected</param>
            <param name="userMessage">The message to be shown when the condition is false</param>
            <exception cref="T:Xunit.Sdk.TrueException">Thrown when the condition is false</exception>
        </member>
        <member name="M:Xunit.Assert.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Verifies that all items in the collection pass when executed against
            action.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="collection">The collection</param>
            <param name="action">The action to test each item against</param>
            <exception cref="T:Xunit.Sdk.AllException">Thrown when the collection contains at least one non-matching element</exception>
        </member>
        <member name="M:Xunit.Assert.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])">
            <summary>
            Verifies that a collection contains exactly a given number of elements, which meet
            the criteria provided by the element inspectors.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="collection">The collection to be inspected</param>
            <param name="elementInspectors">The element inspectors, which inspect each element in turn. The
            total number of element inspectors must exactly match the number of elements in the collection.</param>
        </member>
        <member name="M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that a collection contains a given object.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="expected">The object expected to be in the collection</param>
            <param name="collection">The collection to be inspected</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the object is not present in the collection</exception>
        </member>
        <member name="M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that a collection contains a given object, using an equality comparer.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="expected">The object expected to be in the collection</param>
            <param name="collection">The collection to be inspected</param>
            <param name="comparer">The comparer used to equate objects in the collection with the expected object</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the object is not present in the collection</exception>
        </member>
        <member name="M:Xunit.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Verifies that a collection contains a given object.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="collection">The collection to be inspected</param>
            <param name="filter">The filter used to find the item you're ensuring the collection contains</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the object is not present in the collection</exception>
        </member>
        <member name="M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that a collection does not contain a given object.
            </summary>
            <typeparam name="T">The type of the object to be compared</typeparam>
            <param name="expected">The object that is expected not to be in the collection</param>
            <param name="collection">The collection to be inspected</param>
            <exception cref="T:Xunit.Sdk.DoesNotContainException">Thrown when the object is present inside the container</exception>
        </member>
        <member name="M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that a collection does not contain a given object, using an equality comparer.
            </summary>
            <typeparam name="T">The type of the object to be compared</typeparam>
            <param name="expected">The object that is expected not to be in the collection</param>
            <param name="collection">The collection to be inspected</param>
            <param name="comparer">The comparer used to equate objects in the collection with the expected object</param>
            <exception cref="T:Xunit.Sdk.DoesNotContainException">Thrown when the object is present inside the container</exception>
        </member>
        <member name="M:Xunit.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Verifies that a collection does not contain a given object.
            </summary>
            <typeparam name="T">The type of the object to be compared</typeparam>
            <param name="collection">The collection to be inspected</param>
            <param name="filter">The filter used to find the item you're ensuring the collection does not contain</param>
            <exception cref="T:Xunit.Sdk.DoesNotContainException">Thrown when the object is present inside the container</exception>
        </member>
        <member name="M:Xunit.Assert.Empty(System.Collections.IEnumerable)">
            <summary>
            Verifies that a collection is empty.
            </summary>
            <param name="collection">The collection to be inspected</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the collection is null</exception>
            <exception cref="T:Xunit.Sdk.EmptyException">Thrown when the collection is not empty</exception>
        </member>
        <member name="M:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that two sequences are equivalent, using a default comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the objects are not equal</exception>
        </member>
        <member name="M:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that two sequences are equivalent, using a custom equatable comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <param name="comparer">The comparer used to compare the two objects</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the objects are not equal</exception>
        </member>
        <member name="M:Xunit.Assert.NotEmpty(System.Collections.IEnumerable)">
            <summary>
            Verifies that a collection is not empty.
            </summary>
            <param name="collection">The collection to be inspected</param>
            <exception cref="T:System.ArgumentNullException">Thrown when a null collection is passed</exception>
            <exception cref="T:Xunit.Sdk.NotEmptyException">Thrown when the collection is empty</exception>
        </member>
        <member name="M:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that two sequences are not equivalent, using a default comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <exception cref="T:Xunit.Sdk.NotEqualException">Thrown when the objects are equal</exception>
        </member>
        <member name="M:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that two sequences are not equivalent, using a custom equality comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="comparer">The comparer used to compare the two objects</param>
            <exception cref="T:Xunit.Sdk.NotEqualException">Thrown when the objects are equal</exception>
        </member>
        <member name="M:Xunit.Assert.Single(System.Collections.IEnumerable)">
            <summary>
            Verifies that the given collection contains only a single
            element of the given type.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The single item in the collection.</returns>
            <exception cref="T:Xunit.Sdk.SingleException">Thrown when the collection does not contain
            exactly one element.</exception>
        </member>
        <member name="M:Xunit.Assert.Single(System.Collections.IEnumerable,System.Object)">
            <summary>
            Verifies that the given collection contains only a single
            element of the given value. The collection may or may not
            contain other values.
            </summary>
            <param name="collection">The collection.</param>
            <param name="expected">The value to find in the collection.</param>
            <returns>The single item in the collection.</returns>
            <exception cref="T:Xunit.Sdk.SingleException">Thrown when the collection does not contain
            exactly one element.</exception>
        </member>
        <member name="M:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifies that the given collection contains only a single
            element of the given type.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="collection">The collection.</param>
            <returns>The single item in the collection.</returns>
            <exception cref="T:Xunit.Sdk.SingleException">Thrown when the collection does not contain
            exactly one element.</exception>
        </member>
        <member name="M:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Verifies that the given collection contains only a single
            element of the given type which matches the given predicate. The
            collection may or may not contain other values which do not
            match the given predicate.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The item matching predicate.</param>
            <returns>The single item in the filtered collection.</returns>
            <exception cref="T:Xunit.Sdk.SingleException">Thrown when the filtered collection does
            not contain exactly one element.</exception>
        </member>
        <member name="M:Xunit.Assert.Equal``1(``0,``0)">
            <summary>
            Verifies that two objects are equal, using a default comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the objects are not equal</exception>
        </member>
        <member name="M:Xunit.Assert.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that two objects are equal, using a custom equatable comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <param name="comparer">The comparer used to compare the two objects</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the objects are not equal</exception>
        </member>
        <member name="M:Xunit.Assert.Equal(System.Double,System.Double,System.Int32)">
            <summary>
            Verifies that two <see cref="T:System.Double"/> values are equal, within the number of decimal
            places given by <paramref name="precision"/>.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <param name="precision">The number of decimal places (valid values: 0-15)</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the values are not equal</exception>
        </member>
        <member name="M:Xunit.Assert.Equal(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Verifies that two <see cref="T:System.Decimal"/> values are equal, within the number of decimal
            places given by <paramref name="precision"/>.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <param name="precision">The number of decimal places (valid values: 0-28)</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the values are not equal</exception>
        </member>
        <member name="M:Xunit.Assert.StrictEqual``1(``0,``0)">
            <summary>
            Verifies that two objects are strictly equal, using the type's default comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the objects are not equal</exception>
        </member>
        <member name="M:Xunit.Assert.NotEqual``1(``0,``0)">
            <summary>
            Verifies that two objects are not equal, using a default comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <exception cref="T:Xunit.Sdk.NotEqualException">Thrown when the objects are equal</exception>
        </member>
        <member name="M:Xunit.Assert.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Verifies that two objects are not equal, using a custom equality comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="comparer">The comparer used to examine the objects</param>
            <exception cref="T:Xunit.Sdk.NotEqualException">Thrown when the objects are equal</exception>
        </member>
        <member name="M:Xunit.Assert.NotEqual(System.Double,System.Double,System.Int32)">
            <summary>
            Verifies that two <see cref="T:System.Double"/> values are not equal, within the number of decimal
            places given by <paramref name="precision"/>.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <param name="precision">The number of decimal places (valid values: 0-15)</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the values are equal</exception>
        </member>
        <member name="M:Xunit.Assert.NotEqual(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Verifies that two <see cref="T:System.Decimal"/> values are not equal, within the number of decimal
            places given by <paramref name="precision"/>.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The value to be compared against</param>
            <param name="precision">The number of decimal places (valid values: 0-28)</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the values are equal</exception>
        </member>
        <member name="M:Xunit.Assert.NotStrictEqual``1(``0,``0)">
            <summary>
            Verifies that two objects are strictly not equal, using the type's default comparer.
            </summary>
            <typeparam name="T">The type of the objects to be compared</typeparam>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <exception cref="T:Xunit.Sdk.NotEqualException">Thrown when the objects are equal</exception>
        </member>
        <member name="M:Xunit.Assert.Raises``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)">
            <summary>
            Verifies that a event with the exact event args is raised.
            </summary>
            <typeparam name="T">The type of the event arguments to expect</typeparam>
            <param name="attach">Code to attach the event handler</param>
            <param name="detach">Code to detach the event handler</param>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The event sender and arguments wrapped in an object</returns>
            <exception cref="T:Xunit.Sdk.RaisesException">Thrown when the expected event was not raised.</exception>
        </member>
        <member name="M:Xunit.Assert.RaisesAny``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Action)">
            <summary>
            Verifies that an event with the exact or a derived event args is raised.
            </summary>
            <typeparam name="T">The type of the event arguments to expect</typeparam>
            <param name="attach">Code to attach the event handler</param>
            <param name="detach">Code to detach the event handler</param>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The event sender and arguments wrapped in an object</returns>
            <exception cref="T:Xunit.Sdk.RaisesException">Thrown when the expected event was not raised.</exception>
        </member>
        <member name="M:Xunit.Assert.RaisesAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Verifies that a event with the exact event args (and not a derived type) is raised.
            </summary>
            <typeparam name="T">The type of the event arguments to expect</typeparam>
            <param name="attach">Code to attach the event handler</param>
            <param name="detach">Code to detach the event handler</param>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The event sender and arguments wrapped in an object</returns>
            <exception cref="T:Xunit.Sdk.RaisesException">Thrown when the expected event was not raised.</exception>
        </member>
        <member name="M:Xunit.Assert.RaisesAnyAsync``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Verifies that an event with the exact or a derived event args is raised.
            </summary>
            <typeparam name="T">The type of the event arguments to expect</typeparam>
            <param name="attach">Code to attach the event handler</param>
            <param name="detach">Code to detach the event handler</param>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The event sender and arguments wrapped in an object</returns>
            <exception cref="T:Xunit.Sdk.RaisesException">Thrown when the expected event was not raised.</exception>
        </member>
        <member name="T:Xunit.Assert.RaisedEvent`1">
            <summary>
            Represents a raised event after the fact.
            </summary>
            <typeparam name="T">The type of the event arguments.</typeparam>
        </member>
        <member name="P:Xunit.Assert.RaisedEvent`1.Sender">
            <summary>
            The sender of the event.
            </summary>
        </member>
        <member name="P:Xunit.Assert.RaisedEvent`1.Arguments">
            <summary>
            The event arguments.
            </summary>
        </member>
        <member name="M:Xunit.Assert.RaisedEvent`1.#ctor(System.Object,`0)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Assert.RaisedEvent`1" /> class.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:Xunit.Assert.Throws``1(System.Action)">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            </summary>
            <typeparam name="T">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.Throws``1(System.Func{System.Object})">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            Generally used to test property accessors.
            </summary>
            <typeparam name="T">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.Throws``1(System.Func{System.Threading.Tasks.Task})">
            <summary/>
        </member>
        <member name="M:Xunit.Assert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            </summary>
            <typeparam name="T">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the task to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.ThrowsAny``1(System.Action)">
            <summary>
            Verifies that the exact exception or a derived exception type is thrown.
            </summary>
            <typeparam name="T">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.ThrowsAny``1(System.Func{System.Object})">
            <summary>
            Verifies that the exact exception or a derived exception type is thrown.
            Generally used to test property accessors.
            </summary>
            <typeparam name="T">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Verifies that the exact exception or a derived exception type is thrown.
            </summary>
            <typeparam name="T">The type of the exception expected to be thrown</typeparam>
            <param name="testCode">A delegate to the task to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.Throws(System.Type,System.Action)">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            </summary>
            <param name="exceptionType">The type of the exception expected to be thrown</param>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.Throws(System.Type,System.Func{System.Object})">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            Generally used to test property accessors.
            </summary>
            <param name="exceptionType">The type of the exception expected to be thrown</param>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type).
            </summary>
            <param name="exceptionType">The type of the exception expected to be thrown</param>
            <param name="testCode">A delegate to the task to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.Throws``1(System.String,System.Action)">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type), where the exception
            derives from <see cref="T:System.ArgumentException"/> and has the given parameter name.
            </summary>
            <param name="paramName">The parameter name that is expected to be in the exception</param>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.Throws``1(System.String,System.Func{System.Object})">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type), where the exception
            derives from <see cref="T:System.ArgumentException"/> and has the given parameter name.
            </summary>
            <param name="paramName">The parameter name that is expected to be in the exception</param>
            <param name="testCode">A delegate to the code to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.Throws``1(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary/>
        </member>
        <member name="M:Xunit.Assert.ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Verifies that the exact exception is thrown (and not a derived exception type), where the exception
            derives from <see cref="T:System.ArgumentException"/> and has the given parameter name.
            </summary>
            <param name="paramName">The parameter name that is expected to be in the exception</param>
            <param name="testCode">A delegate to the task to be tested</param>
            <returns>The exception that was thrown, when successful</returns>
            <exception cref="T:Xunit.Sdk.ThrowsException">Thrown when an exception was not thrown, or when an exception of the incorrect type is thrown</exception>
        </member>
        <member name="M:Xunit.Assert.GuardArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="M:Xunit.Assert.NotSame(System.Object,System.Object)">
            <summary>
            Verifies that two objects are not the same instance.
            </summary>
            <param name="expected">The expected object instance</param>
            <param name="actual">The actual object instance</param>
            <exception cref="T:Xunit.Sdk.NotSameException">Thrown when the objects are the same instance</exception>
        </member>
        <member name="M:Xunit.Assert.Same(System.Object,System.Object)">
            <summary>
            Verifies that two objects are the same instance.
            </summary>
            <param name="expected">The expected object instance</param>
            <param name="actual">The actual object instance</param>
            <exception cref="T:Xunit.Sdk.SameException">Thrown when the objects are not the same instance</exception>
        </member>
        <member name="M:Xunit.Assert.NotNull(System.Object)">
            <summary>
            Verifies that an object reference is not null.
            </summary>
            <param name="object">The object to be validated</param>
            <exception cref="T:Xunit.Sdk.NotNullException">Thrown when the object is not null</exception>
        </member>
        <member name="M:Xunit.Assert.Null(System.Object)">
            <summary>
            Verifies that an object reference is null.
            </summary>
            <param name="object">The object to be inspected</param>
            <exception cref="T:Xunit.Sdk.NullException">Thrown when the object reference is not null</exception>
        </member>
        <member name="M:Xunit.Assert.PropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)">
            <summary>
            Verifies that the provided object raised <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            as a result of executing the given test code.
            </summary>
            <param name="object">The object which should raise the notification</param>
            <param name="propertyName">The property name for which the notification should be raised</param>
            <param name="testCode">The test code which should cause the notification to be raised</param>
            <exception cref="T:Xunit.Sdk.PropertyChangedException">Thrown when the notification is not raised</exception>
        </member>
        <member name="M:Xunit.Assert.PropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Func{System.Threading.Tasks.Task})">
            <summary/>
        </member>
        <member name="M:Xunit.Assert.PropertyChangedAsync(System.ComponentModel.INotifyPropertyChanged,System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Verifies that the provided object raised <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            as a result of executing the given test code.
            </summary>
            <param name="object">The object which should raise the notification</param>
            <param name="propertyName">The property name for which the notification should be raised</param>
            <param name="testCode">The test code which should cause the notification to be raised</param>
            <exception cref="T:Xunit.Sdk.PropertyChangedException">Thrown when the notification is not raised</exception>
        </member>
        <member name="M:Xunit.Assert.InRange``1(``0,``0,``0)">
            <summary>
            Verifies that a value is within a given range.
            </summary>
            <typeparam name="T">The type of the value to be compared</typeparam>
            <param name="actual">The actual value to be evaluated</param>
            <param name="low">The (inclusive) low value of the range</param>
            <param name="high">The (inclusive) high value of the range</param>
            <exception cref="T:Xunit.Sdk.InRangeException">Thrown when the value is not in the given range</exception>
        </member>
        <member name="M:Xunit.Assert.InRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Verifies that a value is within a given range, using a comparer.
            </summary>
            <typeparam name="T">The type of the value to be compared</typeparam>
            <param name="actual">The actual value to be evaluated</param>
            <param name="low">The (inclusive) low value of the range</param>
            <param name="high">The (inclusive) high value of the range</param>
            <param name="comparer">The comparer used to evaluate the value's range</param>
            <exception cref="T:Xunit.Sdk.InRangeException">Thrown when the value is not in the given range</exception>
        </member>
        <member name="M:Xunit.Assert.NotInRange``1(``0,``0,``0)">
            <summary>
            Verifies that a value is not within a given range, using the default comparer.
            </summary>
            <typeparam name="T">The type of the value to be compared</typeparam>
            <param name="actual">The actual value to be evaluated</param>
            <param name="low">The (inclusive) low value of the range</param>
            <param name="high">The (inclusive) high value of the range</param>
            <exception cref="T:Xunit.Sdk.NotInRangeException">Thrown when the value is in the given range</exception>
        </member>
        <member name="M:Xunit.Assert.NotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Verifies that a value is not within a given range, using a comparer.
            </summary>
            <typeparam name="T">The type of the value to be compared</typeparam>
            <param name="actual">The actual value to be evaluated</param>
            <param name="low">The (inclusive) low value of the range</param>
            <param name="high">The (inclusive) high value of the range</param>
            <param name="comparer">The comparer used to evaluate the value's range</param>
            <exception cref="T:Xunit.Sdk.NotInRangeException">Thrown when the value is in the given range</exception>
        </member>
        <member name="M:Xunit.Assert.RecordException(System.Action)">
            <summary>
            Records any exception which is thrown by the given code.
            </summary>
            <param name="testCode">The code which may thrown an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="M:Xunit.Assert.RecordException(System.Func{System.Object})">
            <summary>
            Records any exception which is thrown by the given code that has
            a return value. Generally used for testing property accessors.
            </summary>
            <param name="testCode">The code which may thrown an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="M:Xunit.Assert.RecordException(System.Func{System.Threading.Tasks.Task})">
            <summary/>
        </member>
        <member name="M:Xunit.Assert.RecordExceptionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Records any exception which is thrown by the given task.
            </summary>
            <param name="testCode">The task which may thrown an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="M:Xunit.Assert.ProperSubset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
            <summary>
            Verifies that a set is a proper subset of another set.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="expectedSuperset">The expected superset</param>
            <param name="actual">The set expected to be a proper subset</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the actual set is not a proper subset of the expected set</exception>
        </member>
        <member name="M:Xunit.Assert.ProperSuperset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
            <summary>
            Verifies that a set is a proper superset of another set.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="expectedSubset">The expected subset</param>
            <param name="actual">The set expected to be a proper superset</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the actual set is not a proper superset of the expected set</exception>
        </member>
        <member name="M:Xunit.Assert.Subset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
            <summary>
            Verifies that a set is a subset of another set.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="expectedSuperset">The expected superset</param>
            <param name="actual">The set expected to be a subset</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the actual set is not a subset of the expected set</exception>
        </member>
        <member name="M:Xunit.Assert.Superset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
            <summary>
            Verifies that a set is a superset of another set.
            </summary>
            <typeparam name="T">The type of the object to be verified</typeparam>
            <param name="expectedSubset">The expected subset</param>
            <param name="actual">The set expected to be a superset</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the actual set is not a superset of the expected set</exception>
        </member>
        <member name="M:Xunit.Assert.Contains(System.String,System.String)">
            <summary>
            Verifies that a string contains a given sub-string, using the current culture.
            </summary>
            <param name="expectedSubstring">The sub-string expected to be in the string</param>
            <param name="actualString">The string to be inspected</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the sub-string is not present inside the string</exception>
        </member>
        <member name="M:Xunit.Assert.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Verifies that a string contains a given sub-string, using the given comparison type.
            </summary>
            <param name="expectedSubstring">The sub-string expected to be in the string</param>
            <param name="actualString">The string to be inspected</param>
            <param name="comparisonType">The type of string comparison to perform</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the sub-string is not present inside the string</exception>
        </member>
        <member name="M:Xunit.Assert.DoesNotContain(System.String,System.String)">
            <summary>
            Verifies that a string does not contain a given sub-string, using the current culture.
            </summary>
            <param name="expectedSubstring">The sub-string which is expected not to be in the string</param>
            <param name="actualString">The string to be inspected</param>
            <exception cref="T:Xunit.Sdk.DoesNotContainException">Thrown when the sub-string is present inside the string</exception>
        </member>
        <member name="M:Xunit.Assert.DoesNotContain(System.String,System.String,System.StringComparison)">
            <summary>
            Verifies that a string does not contain a given sub-string, using the current culture.
            </summary>
            <param name="expectedSubstring">The sub-string which is expected not to be in the string</param>
            <param name="actualString">The string to be inspected</param>
            <param name="comparisonType">The type of string comparison to perform</param>
            <exception cref="T:Xunit.Sdk.DoesNotContainException">Thrown when the sub-string is present inside the given string</exception>
        </member>
        <member name="M:Xunit.Assert.StartsWith(System.String,System.String)">
            <summary>
            Verifies that a string starts with a given string, using the current culture.
            </summary>
            <param name="expectedStartString">The string expected to be at the start of the string</param>
            <param name="actualString">The string to be inspected</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the string does not start with the expected string</exception>
        </member>
        <member name="M:Xunit.Assert.StartsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Verifies that a string starts with a given string, using the given comparison type.
            </summary>
            <param name="expectedStartString">The string expected to be at the start of the string</param>
            <param name="actualString">The string to be inspected</param>
            <param name="comparisonType">The type of string comparison to perform</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the string does not start with the expected string</exception>
        </member>
        <member name="M:Xunit.Assert.EndsWith(System.String,System.String)">
            <summary>
            Verifies that a string ends with a given string, using the current culture.
            </summary>
            <param name="expectedEndString">The string expected to be at the end of the string</param>
            <param name="actualString">The string to be inspected</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the string does not end with the expected string</exception>
        </member>
        <member name="M:Xunit.Assert.EndsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Verifies that a string ends with a given string, using the given comparison type.
            </summary>
            <param name="expectedEndString">The string expected to be at the end of the string</param>
            <param name="actualString">The string to be inspected</param>
            <param name="comparisonType">The type of string comparison to perform</param>
            <exception cref="T:Xunit.Sdk.ContainsException">Thrown when the string does not end with the expected string</exception>
        </member>
        <member name="M:Xunit.Assert.Matches(System.String,System.String)">
            <summary>
            Verifies that a string matches a regular expression.
            </summary>
            <param name="expectedRegexPattern">The regex pattern expected to match</param>
            <param name="actualString">The string to be inspected</param>
            <exception cref="T:Xunit.Sdk.MatchesException">Thrown when the string does not match the regex pattern</exception>
        </member>
        <member name="M:Xunit.Assert.Matches(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Verifies that a string matches a regular expression.
            </summary>
            <param name="expectedRegex">The regex expected to match</param>
            <param name="actualString">The string to be inspected</param>
            <exception cref="T:Xunit.Sdk.MatchesException">Thrown when the string does not match the regex</exception>
        </member>
        <member name="M:Xunit.Assert.DoesNotMatch(System.String,System.String)">
            <summary>
            Verifies that a string does not match a regular expression.
            </summary>
            <param name="expectedRegexPattern">The regex pattern expected not to match</param>
            <param name="actualString">The string to be inspected</param>
            <exception cref="T:Xunit.Sdk.DoesNotMatchException">Thrown when the string matches the regex pattern</exception>
        </member>
        <member name="M:Xunit.Assert.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Verifies that a string does not match a regular expression.
            </summary>
            <param name="expectedRegex">The regex expected not to match</param>
            <param name="actualString">The string to be inspected</param>
            <exception cref="T:Xunit.Sdk.DoesNotMatchException">Thrown when the string matches the regex</exception>
        </member>
        <member name="M:Xunit.Assert.Equal(System.String,System.String)">
            <summary>
            Verifies that two strings are equivalent.
            </summary>
            <param name="expected">The expected string value.</param>
            <param name="actual">The actual string value.</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the strings are not equivalent.</exception>
        </member>
        <member name="M:Xunit.Assert.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Verifies that two strings are equivalent.
            </summary>
            <param name="expected">The expected string value.</param>
            <param name="actual">The actual string value.</param>
            <param name="ignoreCase">If set to <c>true</c>, ignores cases differences. The invariant culture is used.</param>
            <param name="ignoreLineEndingDifferences">If set to <c>true</c>, treats \r\n, \r, and \n as equivalent.</param>
            <param name="ignoreWhiteSpaceDifferences">If set to <c>true</c>, treats spaces and tabs (in any non-zero quantity) as equivalent.</param>
            <exception cref="T:Xunit.Sdk.EqualException">Thrown when the strings are not equivalent.</exception>
        </member>
        <member name="M:Xunit.Assert.IsAssignableFrom``1(System.Object)">
            <summary>
            Verifies that an object is of the given type or a derived type.
            </summary>
            <typeparam name="T">The type the object should be</typeparam>
            <param name="object">The object to be evaluated</param>
            <returns>The object, casted to type T when successful</returns>
            <exception cref="T:Xunit.Sdk.IsAssignableFromException">Thrown when the object is not the given type</exception>
        </member>
        <member name="M:Xunit.Assert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Verifies that an object is of the given type or a derived type.
            </summary>
            <param name="expectedType">The type the object should be</param>
            <param name="object">The object to be evaluated</param>
            <exception cref="T:Xunit.Sdk.IsAssignableFromException">Thrown when the object is not the given type</exception>
        </member>
        <member name="M:Xunit.Assert.IsNotType``1(System.Object)">
            <summary>
            Verifies that an object is not exactly the given type.
            </summary>
            <typeparam name="T">The type the object should not be</typeparam>
            <param name="object">The object to be evaluated</param>
            <exception cref="T:Xunit.Sdk.IsNotTypeException">Thrown when the object is the given type</exception>
        </member>
        <member name="M:Xunit.Assert.IsNotType(System.Type,System.Object)">
            <summary>
            Verifies that an object is not exactly the given type.
            </summary>
            <param name="expectedType">The type the object should not be</param>
            <param name="object">The object to be evaluated</param>
            <exception cref="T:Xunit.Sdk.IsNotTypeException">Thrown when the object is the given type</exception>
        </member>
        <member name="M:Xunit.Assert.IsType``1(System.Object)">
            <summary>
            Verifies that an object is exactly the given type (and not a derived type).
            </summary>
            <typeparam name="T">The type the object should be</typeparam>
            <param name="object">The object to be evaluated</param>
            <returns>The object, casted to type T when successful</returns>
            <exception cref="T:Xunit.Sdk.IsTypeException">Thrown when the object is not the given type</exception>
        </member>
        <member name="M:Xunit.Assert.IsType(System.Type,System.Object)">
            <summary>
            Verifies that an object is exactly the given type (and not a derived type).
            </summary>
            <param name="expectedType">The type the object should be</param>
            <param name="object">The object to be evaluated</param>
            <exception cref="T:Xunit.Sdk.IsTypeException">Thrown when the object is not the given type</exception>
        </member>
        <member name="T:Xunit.Sdk.ArgumentFormatter">
            <summary>
            Formats arguments for display in theories.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ArgumentFormatter.Format(System.Object)">
            <summary>
            Format the value for presentation.
            </summary>
            <param name="value">The value to be formatted.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:Xunit.Sdk.AssertComparer`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> used by the xUnit.net range assertions.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertComparer`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparer`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used by the xUnit.net equality assertions.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparer`1" /> class.
            </summary>
            <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparerAdapter`1">
            <summary>
            A class that wraps <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to create <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparerAdapter`1"/> class.
            </summary>
            <param name="innerComparer">The comparer that is being adapted.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.GetHashCode(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AllException">
            <summary>
            Exception thrown when an All assertion has one or more items fail an assertion.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AllException.#ctor(System.Int32,System.Tuple{System.Int32,System.Object,System.Exception}[])">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.AllException"/> class.
            </summary>
            <param name="totalItems">The total number of items that were in the collection.</param>
            <param name="errors">The list of errors that occurred during the test pass.</param>
        </member>
        <member name="P:Xunit.Sdk.AllException.Failures">
            <summary>
            The errors that occurred during execution of the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AllException.Message">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssertActualExpectedException">
            <summary>
            Base class for exceptions that have actual and expected values
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AssertActualExpectedException.#ctor(System.Object,System.Object,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see href="AssertActualExpectedException"/> class.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="userMessage">The user message to be shown</param>
            <param name="expectedTitle">The title to use for the expected value (defaults to "Expected")</param>
            <param name="actualTitle">The title to use for the actual value (defaults to "Actual")</param>
        </member>
        <member name="P:Xunit.Sdk.AssertActualExpectedException.Actual">
            <summary>
            Gets the actual value.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AssertActualExpectedException.ActualTitle">
            <summary>
            Gets the title used for the actual value.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AssertActualExpectedException.Expected">
            <summary>
            Gets the expected value.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AssertActualExpectedException.ExpectedTitle">
            <summary>
            Gets the title used for the expected value.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AssertActualExpectedException.Message">
            <summary>
            Gets a message that describes the current exception. Includes the expected and actual values.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Xunit.Sdk.AssertCollectionCountException">
            <summary>
            Exception thrown when the collection did not contain exactly the given number element.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AssertCollectionCountException.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.SingleException"/> class.
            </summary>
            <param name="expectedCount">The expected number of items in the collection.</param>
            <param name="actualCount">The actual number of items in the collection.</param>
        </member>
        <member name="T:Xunit.Sdk.CollectionException">
            <summary>
            Exception thrown when Assert.Collection fails.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.CollectionException.#ctor(System.Object,System.Int32,System.Int32,System.Int32,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.CollectionException"/> class.
            </summary>
            <param name="collection">The collection that failed the test.</param>
            <param name="expectedCount">The expected number of items in the collection.</param>
            <param name="actualCount">The actual number of items in the collection.</param>
            <param name="indexFailurePoint">The index of the position where the first comparison failure occurred.</param>
            <param name="innerException">The exception that was thrown during the comparison failure.</param>
        </member>
        <member name="P:Xunit.Sdk.CollectionException.Collection">
            <summary>
            The collection that failed the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.CollectionException.ActualCount">
            <summary>
            The actual number of items in the collection.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.CollectionException.ExpectedCount">
            <summary>
            The expected number of items in the collection.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.CollectionException.IndexFailurePoint">
            <summary>
            The index of the position where the first comparison failure occurred, or -1 if
            comparisions did not occur (because the actual and expected counts differed).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.CollectionException.Message">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.CollectionException.StackTrace">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ContainsException">
            <summary>
            Exception thrown when a collection unexpectedly does not contain the expected value.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ContainsException.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.ContainsException"/> class.
            </summary>
            <param name="expected">The expected object value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="T:Xunit.Sdk.DoesNotContainException">
            <summary>
            Exception thrown when a collection unexpectedly contains the expected value.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DoesNotContainException.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.DoesNotContainException"/> class.
            </summary>
            <param name="expected">The expected object value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="T:Xunit.Sdk.DoesNotMatchException">
            <summary>
            Exception thrown when a string unexpectedly matches a regular expression.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DoesNotMatchException.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.DoesNotMatchException"/> class.
            </summary>
            <param name="expectedRegexPattern">The regular expression pattern expected not to match</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="T:Xunit.Sdk.EmptyException">
            <summary>
            Exception thrown when a collection is unexpectedly not empty.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.EmptyException.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.EmptyException"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.EmptyException.Collection">
            <summary>
            The collection that failed the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.EmptyException.Message">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.EndsWithException">
            <summary>
            Exception thrown when a string does not end with the expected value.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.EndsWithException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.EndsWithException"/> class.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="T:Xunit.Sdk.EqualException">
            <summary>
            Exception thrown when two values are unexpectedly not equal.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.EqualException.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.EqualException"/> class.
            </summary>
            <param name="expected">The expected object value</param>
            <param name="actual">The actual object value</param>
        </member>
        <member name="M:Xunit.Sdk.EqualException.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.EqualException"/> class for string comparisons.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="expectedIndex">The first index in the expected string where the strings differ</param>
            <param name="actualIndex">The first index in the actual string where the strings differ</param>
        </member>
        <member name="P:Xunit.Sdk.EqualException.ActualIndex">
            <summary>
            Gets the index into the actual value where the values first differed.
            Returns -1 if the difference index points were not provided.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.EqualException.ExpectedIndex">
            <summary>
            Gets the index into the expected value where the values first differed.
            Returns -1 if the difference index points were not provided.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.EqualException.Message">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.FalseException">
            <summary>
            Exception thrown when a value is unexpectedly true.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.FalseException.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.FalseException"/> class.
            </summary>
            <param name="userMessage">The user message to be display, or null for the default message</param>
            <param name="value">The actual value</param>
        </member>
        <member name="T:Xunit.Sdk.InRangeException">
            <summary>
            Exception thrown when a value is unexpectedly not in the given range.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.InRangeException.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.InRangeException"/> class.
            </summary>
            <param name="actual">The actual object value</param>
            <param name="low">The low value of the range</param>
            <param name="high">The high value of the range</param>
        </member>
        <member name="P:Xunit.Sdk.InRangeException.Actual">
            <summary>
            Gets the actual object value
            </summary>
        </member>
        <member name="P:Xunit.Sdk.InRangeException.High">
            <summary>
            Gets the high value of the range
            </summary>
        </member>
        <member name="P:Xunit.Sdk.InRangeException.Low">
            <summary>
            Gets the low value of the range
            </summary>
        </member>
        <member name="P:Xunit.Sdk.InRangeException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:Xunit.Sdk.IsAssignableFromException">
            <summary>
            Exception thrown when the value is unexpectedly not of the given type or a derived type.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IsAssignableFromException.#ctor(System.Type,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.IsTypeException"/> class.
            </summary>
            <param name="expected">The expected type</param>
            <param name="actual">The actual object value</param>
        </member>
        <member name="T:Xunit.Sdk.IsNotTypeException">
            <summary>
            Exception thrown when the value is unexpectedly of the exact given type.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IsNotTypeException.#ctor(System.Type,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.IsNotTypeException"/> class.
            </summary>
            <param name="expected">The expected type</param>
            <param name="actual">The actual object value</param>
        </member>
        <member name="T:Xunit.Sdk.IsTypeException">
            <summary>
            Exception thrown when the value is unexpectedly not of the exact given type.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IsTypeException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.IsTypeException"/> class.
            </summary>
            <param name="expectedTypeName">The expected type name</param>
            <param name="actualTypeName">The actual type name</param>
        </member>
        <member name="T:Xunit.Sdk.MatchesException">
            <summary>
            Exception thrown when a string does not match a regular expression.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MatchesException.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.MatchesException"/> class.
            </summary>
            <param name="expectedRegexPattern">The expected regular expression pattern</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="T:Xunit.Sdk.NotEmptyException">
            <summary>
            Exception thrown when a collection is unexpectedly empty.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.NotEmptyException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.NotEmptyException"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.NotEqualException">
            <summary>
            Exception thrown when two values are unexpectedly equal.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.NotEqualException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.NotEqualException"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.NotInRangeException">
            <summary>
            Exception thrown when a value is unexpectedly in the given range.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.NotInRangeException.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.NotInRangeException"/> class.
            </summary>
            <param name="actual">The actual object value</param>
            <param name="low">The low value of the range</param>
            <param name="high">The high value of the range</param>
        </member>
        <member name="P:Xunit.Sdk.NotInRangeException.Actual">
            <summary>
            Gets the actual object value
            </summary>
        </member>
        <member name="P:Xunit.Sdk.NotInRangeException.High">
            <summary>
            Gets the high value of the range
            </summary>
        </member>
        <member name="P:Xunit.Sdk.NotInRangeException.Low">
            <summary>
            Gets the low value of the range
            </summary>
        </member>
        <member name="P:Xunit.Sdk.NotInRangeException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="T:Xunit.Sdk.NotNullException">
            <summary>
            Exception thrown when an object is unexpectedly null.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.NotNullException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.NotNullException"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.NotSameException">
            <summary>
            Exception thrown when two values are unexpected the same instance.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.NotSameException.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.NotSameException"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.NullException">
            <summary>
            Exception thrown when an object reference is unexpectedly not null.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.NullException.#ctor(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.NullException"/> class.
            </summary>
            <param name="actual"></param>
        </member>
        <member name="T:Xunit.Sdk.ParameterCountMismatchException">
            <summary>
            Exception to be thrown from theory execution when the number of
            parameter values does not the test method signature.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ProperSubsetException">
            <summary>
            Exception thrown when a set is not a proper subset of another set.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ProperSubsetException.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.ProperSubsetException"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ProperSupersetException">
            <summary>
            Exception thrown when a set is not a proper superset of another set.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ProperSupersetException.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.ProperSupersetException"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.PropertyChangedException">
            <summary>
            Exception thrown when code unexpectedly fails change a property.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.PropertyChangedException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.PropertyChangedException"/> class. Call this constructor
            when no exception was thrown.
            </summary>
            <param name="propertyName">The name of the property that was expected to be changed.</param>
        </member>
        <member name="T:Xunit.Sdk.RaisesException">
            <summary>
            Exception thrown when code unexpectedly fails to raise an event.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.RaisesException.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.RaisesException" /> class. Call this constructor
            when no event was raised.
            </summary>
            <param name="expected">The type of the event args that was expected</param>
        </member>
        <member name="M:Xunit.Sdk.RaisesException.#ctor(System.Type,System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.RaisesException" /> class. Call this constructor
            when an
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="P:Xunit.Sdk.RaisesException.Actual">
            <summary>
            Gets the actual value.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.RaisesException.Expected">
            <summary>
            Gets the expected value.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.RaisesException.Message">
            <summary>
            Gets a message that describes the current exception. Includes the expected and actual values.
            </summary>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Xunit.Sdk.RaisesException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
            <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
        </member>
        <member name="T:Xunit.Sdk.SameException">
            <summary>
            Exception thrown when two object references are unexpectedly not the same instance.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SameException.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.SameException"/> class.
            </summary>
            <param name="expected">The expected object reference</param>
            <param name="actual">The actual object reference</param>
        </member>
        <member name="T:Xunit.Sdk.SingleException">
            <summary>
            Exception thrown when the collection did not contain exactly one element.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SingleException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.SingleException"/> class.
            </summary>
            <param name="count">The numbers of items in the collection.</param>
        </member>
        <member name="T:Xunit.Sdk.StartsWithException">
            <summary>
            Exception thrown when a string does not start with the expected value.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.StartsWithException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.StartsWithException"/> class.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="T:Xunit.Sdk.SubsetException">
            <summary>
            Exception thrown when a set is not a subset of another set.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SubsetException.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.SubsetException"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.SupersetException">
            <summary>
            Exception thrown when a set is not a superset of another set.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SupersetException.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.SupersetException"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ThrowsException">
            <summary>
            Exception thrown when code unexpectedly fails to throw an exception.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ThrowsException.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.ThrowsException"/> class. Call this constructor
            when no exception was thrown.
            </summary>
            <param name="expectedType">The type of the exception that was expected</param>
        </member>
        <member name="M:Xunit.Sdk.ThrowsException.#ctor(System.Type,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.ThrowsException"/> class. Call this constructor
            when an exception of the wrong type was thrown.
            </summary>
            <param name="expectedType">The type of the exception that was expected</param>
            <param name="actual">The actual exception that was thrown</param>
        </member>
        <member name="M:Xunit.Sdk.ThrowsException.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>
            THIS CONSTRUCTOR IS FOR UNIT TESTING PURPOSES ONLY.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ThrowsException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
            <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
        </member>
        <member name="T:Xunit.Sdk.TrueException">
            <summary>
            Exception thrown when a value is unexpectedly false.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TrueException.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Sdk.TrueException"/> class.
            </summary>
            <param name="userMessage">The user message to be displayed, or null for the default message</param>
            <param name="value">The actual value</param>
        </member>
        <member name="T:Xunit.Sdk.XunitException">
            <summary>
            The base assert exception class
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitException"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitException"/> class.
            </summary>
            <param name="userMessage">The user message to be displayed</param>
        </member>
        <member name="M:Xunit.Sdk.XunitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitException"/> class.
            </summary>
            <param name="userMessage">The user message to be displayed</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Xunit.Sdk.XunitException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitException"/> class.
            </summary>
            <param name="userMessage">The user message to be displayed</param>
            <param name="stackTrace">The stack trace to be displayed</param>
        </member>
        <member name="P:Xunit.Sdk.XunitException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
            <returns>A string that describes the contents of the call stack, with the most recent method call appearing first.</returns>
        </member>
        <member name="P:Xunit.Sdk.XunitException.UserMessage">
            <summary>
            Gets the user message
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitException.ToString">
            <inheritdoc/>
        </member>
    </members>
</doc>


<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.core</name>
    </assembly>
    <members>
        <member name="T:Xunit.AssemblyTraitAttribute">
            <summary>
            Attribute used to decorate an assembly with arbitrary name/value pairs ("traits").
            </summary>
        </member>
        <member name="M:Xunit.AssemblyTraitAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.AssemblyTraitAttribute"/> class.
            </summary>
            <param name="name">The trait name</param>
            <param name="value">The trait value</param>
        </member>
        <member name="T:Xunit.ClassDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from a class
            which must implement IEnumerable&lt;object[]&gt;.
            Caution: the property is completely enumerated by .ToList() before any test is run. Hence it should return independent object sets.
            </summary>
        </member>
        <member name="M:Xunit.ClassDataAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.ClassDataAttribute"/> class.
            </summary>
            <param name="class">The class that provides the data.</param>
        </member>
        <member name="P:Xunit.ClassDataAttribute.Class">
            <summary>
            Gets the type of the class that provides the data.
            </summary>
        </member>
        <member name="M:Xunit.ClassDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CollectionAttribute">
            <summary>
            Used to declare a specific test collection for a test class.
            </summary>
        </member>
        <member name="M:Xunit.CollectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionAttribute" /> class.
            </summary>
            <param name="name">The test collection name.</param>
        </member>
        <member name="T:Xunit.CollectionBehavior">
            <summary>
            Defines the built-in behavior types for collections in xUnit.net.
            </summary>
        </member>
        <member name="F:Xunit.CollectionBehavior.CollectionPerAssembly">
            <summary>
            By default, generates a collection per assembly, and any test classes that are not
            decorated with <see cref="T:Xunit.CollectionAttribute"/> will be placed into the assembly-level
            collection.
            </summary>
        </member>
        <member name="F:Xunit.CollectionBehavior.CollectionPerClass">
            <summary>
            By default, generates a collection per test class for any test classes that are not
            decorated with <see cref="T:Xunit.CollectionAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.CollectionBehaviorAttribute">
            <summary>
            Used to declare the default test collection behavior for the assembly.
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute" /> class.
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(Xunit.CollectionBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute" /> class.
            </summary>
            <param name="collectionBehavior">The collection behavior for the assembly.</param>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute" /> class.
            </summary>
            <param name="factoryTypeName">The type name of the test collection factory (that implements <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/>).</param>
            <param name="factoryAssemblyName">The assembly that <paramref name="factoryTypeName"/> exists in.</param>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.DisableTestParallelization">
            <summary>
            Determines whether tests in this assembly are run in parallel.
            </summary>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.MaxParallelThreads">
            <summary>
            Determines how many tests can run in parallel with each other. If set to 0, the system will
            use <see cref="P:System.Environment.ProcessorCount"/>. If set to a negative number, then there will
            be no limit to the number of threads.
            </summary>
        </member>
        <member name="T:Xunit.CollectionDefinitionAttribute">
            <summary>
            Used to declare a test collection container class. The container class gives
            developers a place to attach interfaces like <see cref="T:Xunit.IClassFixture`1"/> and
            <see cref="T:Xunit.ICollectionFixture`1"/> that will be applied to all tests classes
            that are members of the test collection.
            </summary>
        </member>
        <member name="M:Xunit.CollectionDefinitionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionDefinitionAttribute" /> class.
            </summary>
            <param name="name">The test collection name.</param>
        </member>
        <member name="P:Xunit.CollectionDefinitionAttribute.DisableParallelization">
            <summary>
            Determines whether tests in this collection runs in parallel with any other collections.
            </summary>
        </member>
        <member name="T:Xunit.Extensions.PropertyDataAttribute">
            <summary/>
        </member>
        <member name="M:Xunit.Extensions.PropertyDataAttribute.#ctor(System.String)">
            <summary/>
        </member>
        <member name="P:Xunit.Extensions.PropertyDataAttribute.PropertyType">
            <summary/>
        </member>
        <member name="T:Xunit.FactAttribute">
            <summary>
            Attribute that is applied to a method to indicate that it is a fact that should be run
            by the test runner. It can also be extended to support a customized definition of a
            test method.
            </summary>
        </member>
        <member name="P:Xunit.FactAttribute.DisplayName">
            <summary>
            Gets the name of the test to be used when the test is skipped. Defaults to
            null, which will cause the fully qualified test name to be used.
            </summary>
        </member>
        <member name="P:Xunit.FactAttribute.Skip">
            <summary>
            Marks the test so that it will not be run, and gets or sets the skip reason
            </summary>
        </member>
        <member name="T:Xunit.IAsyncLifetime">
            <summary>
            Used to provide asynchronous lifetime functionality. Currently supported:
            - Test classes
            - Classes used in <see cref="T:Xunit.IClassFixture`1"/>
            - Classes used in <see cref="T:Xunit.ICollectionFixture`1"/>.
            </summary>
        </member>
        <member name="M:Xunit.IAsyncLifetime.InitializeAsync">
            <summary>
            Called immediately after the class has been created, before it is used.
            </summary>
        </member>
        <member name="M:Xunit.IAsyncLifetime.DisposeAsync">
            <summary>
            Called when an object is no longer needed. Called just before <see cref="M:System.IDisposable.Dispose"/>
            if the class also implements that.
            </summary>
        </member>
        <member name="T:Xunit.IClassFixture`1">
            <summary>
            Used to decorate xUnit.net test classes and collections to indicate a test which has
            per-test-class fixture data. An instance of the fixture data is initialized just before
            the first test in the class is run, and if it implements IDisposable, is disposed
            after the last test in the class is run. To gain access to the fixture data from
            inside the test, a constructor argument should be added to the test class which
            exactly matches the <typeparamref name="TFixture"/>. Class fixtures must have a
            single parameterless constructor, and may take collection fixture types as constructor
            arguments.
            </summary>
            <typeparam name="TFixture">The type of the fixture.</typeparam>
            <remarks>
            If asynchronous setup of <typeparamref name="TFixture"/> is required 
            it should implement the <see cref="T:Xunit.IAsyncLifetime"/> interface.
            </remarks>
        </member>
        <member name="T:Xunit.ICollectionFixture`1">
            <summary>
            Used to decorate xUnit.net test classes and collections to indicate a test which has
            per-test-collection fixture data. An instance of the fixture data is initialized just before
            the first test in the collection is run, and if it implements IDisposable, is disposed
            after the last test in the collection is run. To gain access to the fixture data from
            inside the test, a constructor argument should be added to the test class which
            exactly matches the <typeparamref name="TFixture"/>.
            </summary>
            <typeparam name="TFixture">The type of the fixture.</typeparam>
            <remarks>
            If asynchronous setup of <typeparamref name="TFixture"/> is required 
            it should implement the <see cref="T:Xunit.IAsyncLifetime"/> interface.
            </remarks>
        </member>
        <member name="T:Xunit.InlineDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from inline values.
            </summary>
        </member>
        <member name="M:Xunit.InlineDataAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.InlineDataAttribute"/> class.
            </summary>
            <param name="data">The data values to pass to the theory.</param>
        </member>
        <member name="M:Xunit.InlineDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.ITestCollectionOrderer">
            <summary>
            A class implements this interface to participate in ordering tests
            for the test runner. Test collection orderers are applied using the
            <see cref="T:Xunit.TestCollectionOrdererAttribute"/>, which can be applied at
            the assembly level.
            </summary>
        </member>
        <member name="M:Xunit.ITestCollectionOrderer.OrderTestCollections(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCollection})">
            <summary>
            Orders test collections for execution.
            </summary>
            <param name="testCollections">The test collections to be ordered.</param>
            <returns>The test collections in the order to be run.</returns>
        </member>
        <member name="T:Xunit.MemberDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from one of the following sources:
            1. A static property
            2. A static field
            3. A static method (with parameters)
            The member must return something compatible with IEnumerable&lt;object[]&gt; with the test data.
            Caution: the property is completely enumerated by .ToList() before any test is run. Hence it should return independent object sets.
            </summary>
        </member>
        <member name="M:Xunit.MemberDataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MemberDataAttribute"/> class.
            </summary>
            <param name="memberName">The name of the public static member on the test class that will provide the test data</param>
            <param name="parameters">The parameters for the member (only supported for methods; ignored for everything else)</param>
        </member>
        <member name="M:Xunit.MemberDataAttribute.ConvertDataItem(System.Reflection.MethodInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.MemberDataAttributeBase">
            <summary>
            Provides a base class for attributes that will provide member data. The member data must return
            something compatible with <see cref="T:System.Collections.IEnumerable"/>.
            Caution: the property is completely enumerated by .ToList() before any test is run. Hence it should return independent object sets.
            </summary>
        </member>
        <member name="M:Xunit.MemberDataAttributeBase.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MemberDataAttributeBase"/> class.
            </summary>
            <param name="memberName">The name of the public static member on the test class that will provide the test data</param>
            <param name="parameters">The parameters for the member (only supported for methods; ignored for everything else)</param>
        </member>
        <member name="P:Xunit.MemberDataAttributeBase.DisableDiscoveryEnumeration">
            <summary>
            Returns <c>true</c> if the data attribute wants to skip enumerating data during discovery.
            This will cause the theory to yield a single test case for all data, and the data discovery
            will be during test execution instead of discovery.
            </summary>
        </member>
        <member name="P:Xunit.MemberDataAttributeBase.MemberName">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:Xunit.MemberDataAttributeBase.MemberType">
            <summary>
            Gets or sets the type to retrieve the member from. If not set, then the property will be
            retrieved from the unit test class.
            </summary>
        </member>
        <member name="P:Xunit.MemberDataAttributeBase.Parameters">
            <summary>
            Gets or sets the parameters passed to the member. Only supported for static methods.
            </summary>
        </member>
        <member name="M:Xunit.MemberDataAttributeBase.GetData(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.MemberDataAttributeBase.ConvertDataItem(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Converts an item yielded by the data member to an object array, for return from <see cref="M:Xunit.MemberDataAttributeBase.GetData(System.Reflection.MethodInfo)"/>.
            </summary>
            <param name="testMethod">The method that is being tested.</param>
            <param name="item">An item yielded from the data member.</param>
            <returns>An <see cref="T:object[]"/> suitable for return from <see cref="M:Xunit.MemberDataAttributeBase.GetData(System.Reflection.MethodInfo)"/>.</returns>
        </member>
        <member name="T:Xunit.Record">
            <summary>
            Allows the user to record actions for a test.
            </summary>
        </member>
        <member name="M:Xunit.Record.Exception(System.Action)">
            <summary>
            Records any exception which is thrown by the given code.
            </summary>
            <param name="testCode">The code which may throw an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="M:Xunit.Record.Exception(System.Func{System.Object})">
            <summary>
            Records any exception which is thrown by the given code that has
            a return value. Generally used for testing property accessors.
            </summary>
            <param name="testCode">The code which may throw an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="M:Xunit.Record.Exception(System.Func{System.Threading.Tasks.Task})">
            <summary/>
        </member>
        <member name="M:Xunit.Record.ExceptionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Records any exception which is thrown by the given task.
            </summary>
            <param name="testCode">The task which may throw an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="M:Xunit.Record.GuardArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.AssemblyTraitDiscoverer">
            <summary>
            The implementation of <see cref="T:Xunit.Sdk.ITraitDiscoverer"/> which returns the trait values
            for <see cref="T:Xunit.AssemblyTraitAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AssemblyTraitDiscoverer.GetTraits(Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.BeforeAfterTestAttribute">
            <summary>
            Base attribute which indicates a test method interception (allows code to be run before and
            after the test is run).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.BeforeAfterTestAttribute.After(System.Reflection.MethodInfo)">
            <summary>
            This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:Xunit.Sdk.BeforeAfterTestAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
            This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="T:Xunit.Sdk.DataAttribute">
            <summary>
            Abstract attribute which represents a data source for a data theory.
            Data source providers derive from this attribute and implement GetData
            to return the data for the theory.
            Caution: the property is completely enumerated by .ToList() before any test is run. Hence it should return independent object sets.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DataAttribute.GetData(System.Reflection.MethodInfo)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <param name="testMethod">The method that is being tested</param>
            <returns>One or more sets of theory data. Each invocation of the test method
            is represented by a single object array.</returns>
        </member>
        <member name="P:Xunit.Sdk.DataAttribute.Skip">
            <summary>
            Marks all test cases generated by this data source as skipped.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.DataDiscoverer">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IDataDiscoverer"/>. Uses reflection to find the
            data associated with <see cref="T:Xunit.Sdk.DataAttribute"/>; may return <c>null</c> when called
            without reflection-based abstraction implementations.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DataDiscoverer.GetData(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.DataDiscoverer.SupportsDiscoveryEnumeration(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DataDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which derive from <see cref="T:Xunit.Sdk.DataAttribute"/>,
            to indicate how data elements should be discovered.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DataDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.Sdk.DataDiscovererAttribute"/>.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.DataDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.Sdk.ExceptionAggregator">
            <summary>
            Aggregates exceptions. Intended to run one or more code blocks, and collect the
            exceptions thrown by those code blocks.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ExceptionAggregator"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.#ctor(Xunit.Sdk.ExceptionAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ExceptionAggregator"/> class that
            contains the exception list of its parent.
            </summary>
            <param name="parent">The parent aggregator to copy exceptions from.</param>
        </member>
        <member name="P:Xunit.Sdk.ExceptionAggregator.HasExceptions">
            <summary>
            Returns <c>true</c> if the aggregator has at least one exception inside it.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.Add(System.Exception)">
            <summary>
            Adds an exception to the aggregator.
            </summary>
            <param name="ex">The exception to be added.</param>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.Aggregate(Xunit.Sdk.ExceptionAggregator)">
            <summary>
            Adds exceptions from another aggregator into this aggregator.
            </summary>
            <param name="aggregator">The aggregator whose exceptions should be copied.</param>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.Clear">
            <summary>
            Clears the aggregator.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.Run(System.Action)">
            <summary>
            Runs the code, catching the exception that is thrown and adding it to
            the aggregate.
            </summary>
            <param name="code">The code to be run.</param>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the code, catching the exception that is thrown and adding it to
            the aggregate.
            </summary>
            <param name="code">The code to be run.</param>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.RunAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the code, catching the exception that is thrown and adding it to
            the aggregate.
            </summary>
            <param name="code">The code to be run.</param>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.ToException">
            <summary>
            Returns an exception that represents the exceptions thrown by the code
            passed to the <see cref="M:Xunit.Sdk.ExceptionAggregator.Run(System.Action)"/> or <see cref="M:Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func{System.Threading.Tasks.Task})"/> method.
            </summary>
            <returns>Returns <c>null</c> if no exceptions were thrown; returns the
            exact exception if a single exception was thrown; returns <see cref="T:System.AggregateException"/>
            if more than one exception was thrown.</returns>
        </member>
        <member name="T:Xunit.Sdk.IDataDiscoverer">
            <summary>
            This class is responsible for discovering the data available in an implementation
            of <see cref="T:Xunit.Sdk.DataAttribute"/>. The discovery process may not always have access
            to reflection (i.e., running in Resharper), so the discoverer must make a best
            effort to return data, but may return null when there is not enough information
            available (for example, if reflection is required to answer the question).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IDataDiscoverer.GetData(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <remarks>
            This will be called during
            discovery, at which point the <paramref name="testMethod"/> may or may not
            be backed by reflection (i.e., implementing <see cref="T:Xunit.Abstractions.IReflectionMethodInfo"/>).
            If the data is not available because reflection is required, then you may return
            null to inform xUnit that the quantity of data is unknown at this point.
            When the tests are run, if you returned back null during discovery, then this method
            will be called again to retrieve the data, this time guaranteed to provide
            an implementation of <see cref="T:Xunit.Abstractions.IReflectionMethodInfo"/>. At this time, you
            must return the actual data, and returning null is not legal.
            </remarks>
            <param name="dataAttribute">The data attribute being discovered</param>
            <param name="testMethod">The method that is being tested/discovered</param>
            <returns>The theory data (or null during discovery, if not enough
            information is available to enumerate the data)</returns>
        </member>
        <member name="M:Xunit.Sdk.IDataDiscoverer.SupportsDiscoveryEnumeration(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <summary>
            Returns <c>true</c> if the data attribute supports enumeration during
            discovery; <c>false</c> otherwise. Data attributes with expensive computational
            costs and/or randomized data sets should return <c>false</c>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IMessageBus">
            <summary>
            Used by discovery, execution, and extensibility code to send messages to the runner.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IMessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary>
            Queues a message to be sent to the runner.
            </summary>
            <param name="message">The message to be sent to the runner</param>
            <returns>
            Returns <c>true</c> if discovery/execution should continue; <c>false</c>, otherwise.
            The return value may be safely ignored by components which are not directly responsible
            for discovery or execution, and this is intended to communicate to those sub-systems that
            that they should short circuit and stop their work as quickly as is reasonable.
            </returns>
        </member>
        <member name="T:Xunit.Sdk.InlineDataDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IDataDiscoverer"/> used to discover the data
            provided by <see cref="T:Xunit.InlineDataAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.InlineDataDiscoverer.GetData(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.InlineDataDiscoverer.SupportsDiscoveryEnumeration(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ITestCaseOrderer">
            <summary>
            A class implements this interface to participate in ordering tests
            for the test runner. Test case orderers are applied using the
            <see cref="T:Xunit.TestCaseOrdererAttribute"/>, which can be applied at
            the assembly, test collection, and test class level.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ITestCaseOrderer.OrderTestCases``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Orders test cases for execution.
            </summary>
            <param name="testCases">The test cases to be ordered.</param>
            <returns>The test cases in the order to be run.</returns>
        </member>
        <member name="T:Xunit.Sdk.ITestFrameworkAttribute">
            <summary>
            Marker interface that must be implemented by test framework attributes, so
            that the test framework attribute discoverer can find them.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestFrameworkTypeDiscoverer">
            <summary>
            Interface to be implemented by classes which are used to discover the test framework.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ITestFrameworkTypeDiscoverer.GetTestFrameworkType(Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets the type that implements <see cref="T:Xunit.Abstractions.ITestFramework"/> to be used to discover
            and run tests.
            </summary>
            <param name="attribute">The test framework attribute that decorated the assembly</param>
            <returns>The test framework type</returns>
        </member>
        <member name="T:Xunit.Sdk.ITraitAttribute">
            <summary>
            Marker interface used by attributes which provide trait data.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITraitDiscoverer">
            <summary>
            This interface is implemented by discoverers that provide trait values to
            xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ITraitDiscoverer.GetTraits(Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets the trait values from the trait attribute.
            </summary>
            <param name="traitAttribute">The trait attribute containing the trait values.</param>
            <returns>The trait values.</returns>
        </member>
        <member name="T:Xunit.Sdk.IXunitTestCase">
            <summary>
            Represents a single test case from xUnit.net v2.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IXunitTestCase.Method">
            <summary>
            Gets the method to be run. Differs from <see cref="P:Xunit.Abstractions.ITestCase.TestMethod"/>.<see cref="P:Xunit.Abstractions.ITestMethod.Method"/> in that
            any generic argument types will have been closed based on the arguments.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IXunitTestCase.RunAsync(Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Executes the test case, returning 0 or more result messages through the message sink.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages to.</param>
            <param name="messageBus">The message bus to report results to.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="aggregator">The error aggregator to use for catching exception.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
            <returns>Returns the summary of the test case run.</returns>
        </member>
        <member name="T:Xunit.Sdk.IXunitTestCaseDiscoverer">
            <summary>
            Interface to be implemented by classes which are used to discover tests cases attached
            to test methods that are attributed with <see cref="T:Xunit.FactAttribute"/> (or a subclass).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IXunitTestCaseDiscoverer.Discover(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Discover test cases from a test method.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="factAttribute">The fact attribute attached to the test method.</param>
            <returns>Returns zero or more test cases represented by the test method.</returns>
        </member>
        <member name="T:Xunit.Sdk.IXunitTestCollectionFactory">
            <summary>
            This interface is intended to be implemented by components which generate test collections.
            End users specify the desired test collection factory by applying <see cref="T:Xunit.CollectionBehaviorAttribute"/>
            at the assembly level. Classes which implement this interface must have a constructor
            that takes <see cref="T:Xunit.Abstractions.ITestAssembly"/> and <see cref="T:Xunit.Abstractions.IMessageSink"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.IXunitTestCollectionFactory.DisplayName">
            <summary>
            Gets the display name for the test collection factory. This information is shown to the end
            user as part of the description of the test environment.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IXunitTestCollectionFactory.Get(Xunit.Abstractions.ITypeInfo)">
            <summary>
            Gets the test collection for a given test class.
            </summary>
            <param name="testClass">The test class.</param>
            <returns>The test collection.</returns>
        </member>
        <member name="T:Xunit.Sdk.MemberDataDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IDataDiscoverer"/> for discovering <see cref="T:Xunit.MemberDataAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MemberDataDiscoverer.SupportsDiscoveryEnumeration(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.PlatformSpecificAssemblyAttribute">
             <summary>
             Marks an assembly as a platform specific assembly for use with xUnit.net. Type references from
             such assemblies are allowed to use a special suffix ("My.Assembly.{Platform}"), which will
             automatically be translated into the correct platform-specific name ("My.Assembly.desktop",
             "My.Assembly.win8", etc.). This affects both extensibility points which require specifying
             a string-based type name and assembly, as well as serialization.
            
             In v2.1 and later, the supported platform target names include:
            
               "desktop" (for desktop and PCL tests),
               "dotnet" (everything else).
            
             In v2.0, the following names were also supported:
             
               "iOS-Universal" (for Xamarin test projects targeting iOS),
               "MonoAndroid" (for Xamarin MonoAndroid tests),
               "MonoTouch" (for Xamarin MonoTouch tests),
               "universal" (for Windows Phone 8.1 and Windows 8.1 tests),
               "win8" (for Windows 8 tests),
               "wp8" (for Windows Phone 8 Silverlight tests).
            
             For backward compatibility reasons, the v2.1 runners will support tests linked against
             the v2.0 execution libraries.
            
             Note that file names may be case sensitive (when running on platforms with case sensitive
             file systems like Linux), so ensure that your assembly file name casing is consistent, and
             that you use the suffixes here with the exact case shown.
             </summary>
        </member>
        <member name="T:Xunit.Sdk.RunSummary">
            <summary>
            Represents the statistical summary from a run of one or more tests.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.RunSummary.Total">
            <summary>
            The total number of tests run.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.RunSummary.Failed">
            <summary>
            The number of failed tests.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.RunSummary.Skipped">
            <summary>
            The number of skipped tests.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.RunSummary.Time">
            <summary>
            The total time taken to run the tests, in seconds.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.RunSummary.Aggregate(Xunit.Sdk.RunSummary)">
            <summary>
            Adds a run summary's totals into this run summary.
            </summary>
            <param name="other">The run summary to be added.</param>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkDiscovererAttribute">
            <summary>
            Decorates an implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> that is used to
            determine which test framework is used to discover and run tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.Sdk.TestFrameworkDiscovererAttribute"/>.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.DataDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.Sdk.TraitDiscoverer">
            <summary>
            The implementation of <see cref="T:Xunit.Sdk.ITraitDiscoverer"/> which returns the trait values
            for <see cref="T:Xunit.TraitAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TraitDiscoverer.GetTraits(Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TraitDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which implement <see cref="T:Xunit.Sdk.ITraitAttribute"/>,
            to indicate how trait values should be discovered. The discoverer type must implement
            <see cref="T:Xunit.Sdk.ITraitDiscoverer"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TraitDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.Sdk.TraitDiscovererAttribute"/>.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.TraitDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCaseDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which derive from <see cref="T:Xunit.FactAttribute"/>,
            to indicate how test cases should be discovered.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCaseDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Xunit.Sdk.XunitTestCaseDiscovererAttribute"/> class.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.FactDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.Sdk.TestMethodDisplay">
            <summary>
            Indicates the default display name format for test methods.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplay.ClassAndMethod">
            <summary>
            Use a fully qualified name (namespace + class + method)
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodDisplay.Method">
            <summary>
            Use just the method name (without class)
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ArgumentFormatter">
            <summary>
            Formats arguments for display in theories.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ArgumentFormatter.Format(System.Object)">
            <summary>
            Format the value for presentation.
            </summary>
            <param name="value">The value to be formatted.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparer`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used by the xUnit.net equality assertions.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparer`1" /> class.
            </summary>
            <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparerAdapter`1">
            <summary>
            A class that wraps <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to create <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparerAdapter`1"/> class.
            </summary>
            <param name="innerComparer">The comparer that is being adapted.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.GetHashCode(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCaseOrdererAttribute">
            <summary>
            Used to decorate an assembly, test collection, or test class to allow
            the use of a custom <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseOrdererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseOrdererAttribute"/> class.
            </summary>
            <param name="ordererTypeName">The type name of the orderer class (that implements <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>).</param>
            <param name="ordererAssemblyName">The assembly that <paramref name="ordererTypeName"/> exists in.</param>
        </member>
        <member name="T:Xunit.TestCollectionOrdererAttribute">
            <summary>
            Used to decorate an assembly to allow the use of a custom <see cref="T:Xunit.Sdk.ITestCollectionOrderer"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCollectionOrdererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCollectionOrdererAttribute"/> class.
            </summary>
            <param name="ordererTypeName">The type name of the orderer class (that implements <see cref="T:Xunit.Sdk.ITestCollectionOrderer"/>).</param>
            <param name="ordererAssemblyName">The assembly that <paramref name="ordererTypeName"/> exists in.</param>
        </member>
        <member name="T:Xunit.TestFrameworkAttribute">
            <summary>
            Used to decorate an assembly to allow the use of a custom <see cref="T:Xunit.Sdk.ITestFramework"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestFrameworkAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.TestFrameworkAttribute"/>.
            </summary>
            <param name="typeName">The fully qualified type name of the test framework
            (f.e., 'Xunit.Sdk.XunitTestFramework')</param>
            <param name="assemblyName">The name of the assembly that the test framework type
            is located in, without file extension (f.e., 'xunit.execution')</param>
        </member>
        <member name="T:Xunit.TheoryAttribute">
            <summary>
            Marks a test method as being a data theory. Data theories are tests which are fed
            various bits of data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed
            multiple times (once with each data row). Data is provided by attributes which
            derive from <see cref="T:Xunit.Sdk.DataAttribute"/> (notably, <see cref="T:Xunit.InlineDataAttribute"/> and
            <see cref="T:Xunit.MemberDataAttribute"/>).
            </summary>
        </member>
        <member name="T:Xunit.TheoryData">
            <summary>
            Provides data for theories based on collection initialization syntax.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData.AddRow(System.Object[])">
            <summary>
            Adds a row to the theory.
            </summary>
            <param name="values">The values to be added.</param>
        </member>
        <member name="M:Xunit.TheoryData.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryData.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`1">
            <summary>
            Represents a set of data for a theory with a single parameter. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`1.Add(`0)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p">The data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`2">
            <summary>
            Represents a set of data for a theory with 2 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`2.Add(`0,`1)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`3">
            <summary>
            Represents a set of data for a theory with 3 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`3.Add(`0,`1,`2)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`4">
            <summary>
            Represents a set of data for a theory with 4 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`4.Add(`0,`1,`2,`3)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`5">
            <summary>
            Represents a set of data for a theory with 5 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`5.Add(`0,`1,`2,`3,`4)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`6">
            <summary>
            Represents a set of data for a theory with 5 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`6.Add(`0,`1,`2,`3,`4,`5)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`7">
            <summary>
            Represents a set of data for a theory with 5 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`7.Add(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`8">
            <summary>
            Represents a set of data for a theory with 5 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eigth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`8.Add(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eigth data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`9">
            <summary>
            Represents a set of data for a theory with 5 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eigth parameter type.</typeparam>
            <typeparam name="T9">The nineth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`9.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eigth data value.</param>
            <param name="p9">The nineth data value.</param>
        </member>
        <member name="T:Xunit.TheoryData`10">
            <summary>
            Represents a set of data for a theory with 5 parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eigth parameter type.</typeparam>
            <typeparam name="T9">The nineth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`10.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eigth data value.</param>
            <param name="p9">The nineth data value.</param>
            <param name="p10">The tenth data value.</param>
        </member>
        <member name="T:Xunit.TraitAttribute">
            <summary>
            Attribute used to decorate a test method with arbitrary name/value pairs ("traits").
            </summary>
        </member>
        <member name="M:Xunit.TraitAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.TraitAttribute"/> class.
            </summary>
            <param name="name">The trait name</param>
            <param name="value">The trait value</param>
        </member>
        <member name="M:ExceptionExtensions.RethrowWithNoStackTraceLoss(System.Exception)">
            <summary>
            Rethrows an exception object without losing the existing stack trace information
            </summary>
            <param name="ex">The exception to re-throw.</param>
            <remarks>
            For more information on this technique, see
            http://www.dotnetjunkies.com/WebLog/chris.taylor/archive/2004/03/03/8353.aspx.
            The remote_stack_trace string is here to support Mono.
            </remarks>
        </member>
        <member name="M:ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwraps an exception to remove any wrappers, like <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="ex">The exception to unwrap.</param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="T:Guard">
            <summary>
            Guard class, used for guard clauses and argument validation
            </summary>
        </member>
        <member name="M:Guard.ArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentNotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentValid(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
    </members>
</doc>


<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.execution.desktop</name>
    </assembly>
    <members>
        <member name="T:ReflectionAbstractionExtensions">
            <summary>
            This class represents utility methods needed to supplement the
            reflection capabilities provided by the CLR
            </summary>
        </member>
        <member name="M:ReflectionAbstractionExtensions.CreateTestClass(Xunit.Abstractions.ITest,System.Type,System.Object[],Xunit.Sdk.IMessageBus,Xunit.Sdk.ExecutionTimer,System.Threading.CancellationTokenSource)">
            <summary>
            Creates an instance of the test class for the given test case. Sends the <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/>
            and <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/> messages as appropriate.
            </summary>
            <param name="test">The test</param>
            <param name="testClassType">The type of the test class</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
            <param name="messageBus">The message bus used to send the test messages</param>
            <param name="timer">The timer used to measure the time taken for construction</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <returns></returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.DisposeTestClass(Xunit.Abstractions.ITest,System.Object,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExecutionTimer,System.Threading.CancellationTokenSource)">
            <summary>
            Disposes the test class instance. Sends the <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/> and <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/>
            messages as appropriate.
            </summary>
            <param name="test">The test</param>
            <param name="testClass">The test class instance to be disposed</param>
            <param name="messageBus">The message bus used to send the test messages</param>
            <param name="timer">The timer used to measure the time taken for construction</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetMatchingMethods(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Gets methods in the target type that match the protection level of the supplied method
            </summary>
            <param name="type">The type</param>
            <param name="methodInfo">The method</param>
            <returns>The reflection method informations that match</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetCustomAttributes(Xunit.Abstractions.IAssemblyInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the given assembly.
            </summary>
            <param name="assemblyInfo">The assembly</param>
            <param name="attributeType">The type of the attribute</param>
            <returns>The matching attributes that decorate the assembly</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetCustomAttributes(Xunit.Abstractions.IAttributeInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the given attribute.
            </summary>
            <param name="attributeInfo">The attribute</param>
            <param name="attributeType">The type of the attribute to find</param>
            <returns>The matching attributes that decorate the attribute</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetCustomAttributes(Xunit.Abstractions.IMethodInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the method that are of the given type.
            </summary>
            <param name="methodInfo">The method</param>
            <param name="attributeType">The type of the attribute</param>
            <returns>The matching attributes that decorate the method</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.GetCustomAttributes(Xunit.Abstractions.ITypeInfo,System.Type)">
            <summary>
            Gets all the custom attributes for the given type.
            </summary>
            <param name="typeInfo">The type</param>
            <param name="attributeType">The type of the attribute</param>
            <returns>The matching attributes that decorate the type</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.ToRuntimeMethod(Xunit.Abstractions.IMethodInfo)">
            <summary>
            Converts an <see cref="T:Xunit.Abstractions.IMethodInfo"/> into a <see cref="T:System.Reflection.MethodInfo"/>, if possible (for example, this
            will not work when the test method is based on source code rather than binaries).
            </summary>
            <param name="methodInfo">The method to convert</param>
            <returns>The runtime method, if available; <c>null</c>, otherwise</returns>
        </member>
        <member name="M:ReflectionAbstractionExtensions.ToRuntimeType(Xunit.Abstractions.ITypeInfo)">
            <summary>
            Converts an <see cref="T:Xunit.Abstractions.ITypeInfo"/> into a <see cref="T:System.Type"/>, if possible (for example, this
            will not work when the test class is based on source code rather than binaries).
            </summary>
            <param name="typeInfo">The type to convert</param>
            <returns>The runtime type, if available, <c>null</c>, otherwise</returns>
        </member>
        <member name="T:TestFrameworkOptionsReadExtensions">
            <summary>
            Extension methods for reading <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoveryOptions"/> and <see cref="T:Xunit.Abstractions.ITestFrameworkExecutionOptions"/>.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.DiagnosticMessages(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.DiagnosticMessagesOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not present,
            returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.MethodDisplay(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format for test methods.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.MethodDisplayOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format for test methods. If the flag is not present,
            returns the default value (<see cref="F:Xunit.Sdk.TestMethodDisplay.ClassAndMethod"/>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.PreEnumerateTheories(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether theories are pre-enumerated. If enabled, then the
            discovery system will return a test case for each row of test data; if disabled, the
            discovery system will return a single test case for the theory.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.PreEnumerateTheoriesOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether theories are pre-enumerated. If enabled, then the
            discovery system will return a test case for each row of test data; if disabled, then the
            discovery system will return a single test case for the theory. If the flag is not present,
            returns the default value (<c>true</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.SynchronousMessageReporting(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.SynchronousMessageReportingOrDefault(Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.DiagnosticMessages(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.DiagnosticMessagesOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not
            present, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.DisableParallelization(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to disable parallelization.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.DisableParallelizationOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to disable parallelization. If the flag is not present, returns the
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.MaxParallelThreads(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.MaxParallelThreadsOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel. If set to 0 (or not set),
            the value of <see cref="P:System.Environment.ProcessorCount"/> is used; if set to a value less
            than 0, does not limit the number of threads.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.StopOnTestFail(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to stop testing on test failure.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.StopOnTestFailOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to stop testing on test failure. If the flag is not present, returns the 
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.SynchronousMessageReporting(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:TestFrameworkOptionsReadExtensions.SynchronousMessageReportingOrDefault(Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="T:Xunit.Sdk.AsyncTestSyncContext">
            <summary>
            This implementation of <see cref="T:System.Threading.SynchronizationContext"/> allows the developer to track the count
            of outstanding "async void" operations, and wait for them all to complete.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AsyncTestSyncContext.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AsyncTestSyncContext"/> class.
            </summary>
            <param name="innerContext">The existing synchronization context (may be <c>null</c>).</param>
        </member>
        <member name="M:Xunit.Sdk.AsyncTestSyncContext.OperationCompleted">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AsyncTestSyncContext.OperationStarted">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AsyncTestSyncContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AsyncTestSyncContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AsyncTestSyncContext.WaitForCompletionAsync">
            <summary>
            Returns a task which is signaled when all outstanding operations are complete.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.DefaultTestCaseOrderer">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>. Orders tests in
            an unpredictable but stable order, so that repeated test runs of the
            identical test assembly run tests in the same order.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DefaultTestCaseOrderer.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DefaultTestCaseOrderer"/> class.
            </summary>
            <param name="diagnosticMessageSink">Message sink to report diagnostic messages to</param>
        </member>
        <member name="M:Xunit.Sdk.DefaultTestCaseOrderer.OrderTestCases``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DefaultTestCollectionOrderer">
            <summary>
            Default implementation of <see cref="T:Xunit.ITestCollectionOrderer"/>. Orders tests in
            an unpredictable and unstable order, so that repeated test runs of the
            identical test assembly run test collections in a random order.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DefaultTestCollectionOrderer.OrderTestCollections(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCollection})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DisposalTracker">
            <summary>
            Tracks disposable objects, and disposes them in the reverse order they were added to
            the tracker.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.Add(System.IDisposable)">
            <summary>
            Add an object to be disposed.
            </summary>
            <param name="disposable">The object to be disposed.</param>
        </member>
        <member name="M:Xunit.Sdk.DisposalTracker.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ExtensibilityPointFactory">
            <summary>
            Represents a caching factory for the types used for extensibility throughout the system.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.Dispose">
            <summary>
            Disposes the instances that are contained in the cache.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.Get``1(Xunit.Abstractions.IMessageSink,System.Type,System.Object[])">
            <summary>
            Gets an instance of the given type, casting it to <typeparamref name="TInterface"/>, using the provided
            constructor arguments. There is a single instance of a given type that is cached and reused,
            so classes retrieved from this factory must be stateless and thread-safe.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="type">The implementation type.</param>
            <param name="ctorArgs">The constructor arguments. Since diagnostic message sinks are optional,
            the code first looks for a type that takes the given arguments plus the message sink, and only
            falls back to the message sink-less constructor if none was found.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetDataDiscoverer(Xunit.Abstractions.IMessageSink,System.Type)">
            <summary>
            Gets a data discoverer.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="discovererType">The discoverer type</param>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetDataDiscoverer(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets a data discoverer, as specified in a reflected <see cref="T:Xunit.Sdk.DataDiscovererAttribute"/>.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="dataDiscovererAttribute">The data discoverer attribute</param>
            <returns>The data discoverer, if the type is loadable; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestCaseOrderer(Xunit.Abstractions.IMessageSink,System.Type)">
            <summary>
            Gets a test case orderer.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="ordererType">The test case orderer type</param>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestCaseOrderer(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets a test case orderer, as specified in a reflected <see cref="T:Xunit.TestCaseOrdererAttribute"/>.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="testCaseOrdererAttribute">The test case orderer attribute.</param>
            <returns>The test case orderer, if the type is loadable; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestCollectionOrderer(Xunit.Abstractions.IMessageSink,System.Type)">
            <summary>
            Gets a test collection orderer.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="ordererType">The test collection orderer type</param>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestCollectionOrderer(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets a test collection orderer, as specified in a reflected <see cref="T:Xunit.TestCollectionOrdererAttribute"/>.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="testCollectionOrdererAttribute">The test collection orderer attribute.</param>
            <returns>The test collection orderer, if the type is loadable; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestFrameworkTypeDiscoverer(Xunit.Abstractions.IMessageSink,System.Type)">
            <summary>
            Gets a test framework discoverer.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="frameworkType">The test framework type discoverer type</param>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTestFrameworkTypeDiscoverer(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets a test framework discoverer, as specified in a reflected <see cref="T:Xunit.Sdk.TestFrameworkDiscovererAttribute"/>.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="testFrameworkDiscovererAttribute">The test framework discoverer attribute</param>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTraitDiscoverer(Xunit.Abstractions.IMessageSink,System.Type)">
            <summary>
            Gets a trait discoverer.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="traitDiscovererType">The trait discoverer type</param>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetTraitDiscoverer(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets a trait discoverer, as specified in a reflected <see cref="T:Xunit.Sdk.TraitDiscovererAttribute"/>.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="traitDiscovererAttribute">The trait discoverer attribute.</param>
            <returns>The trait discoverer, if the type is loadable; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetXunitTestCaseDiscoverer(Xunit.Abstractions.IMessageSink,System.Type)">
            <summary>
            Gets an xUnit.net v2 test discoverer.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="testCaseDiscovererType">The test case discoverer type</param>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetXunitTestCollectionFactory(Xunit.Abstractions.IMessageSink,System.Type,Xunit.Abstractions.ITestAssembly)">
            <summary>
            Gets an xUnit.net v2 test collection factory.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="testCollectionFactoryType">The test collection factory type</param>
            <param name="testAssembly">The test assembly under test</param>
        </member>
        <member name="M:Xunit.Sdk.ExtensibilityPointFactory.GetXunitTestCollectionFactory(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.ITestAssembly)">
            <summary>
            Gets an xUnit.net v2 test collection factory, as specified in a reflected <see cref="T:Xunit.CollectionBehaviorAttribute"/>.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="collectionBehaviorAttribute">The collection behavior attribute.</param>
            <param name="testAssembly">The test assembly.</param>
            <returns>The collection factory.</returns>
        </member>
        <member name="T:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/> that creates a single
            default test collection for the assembly, and places any tests classes without
            the <see cref="T:Xunit.CollectionAttribute"/> into it.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.#ctor(Xunit.Abstractions.ITestAssembly,Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory" /> class.
            </summary>
            <param name="testAssembly">The assembly.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
        </member>
        <member name="P:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.Get(Xunit.Abstractions.ITypeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.CollectionPerClassTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/> which creates a new test
            collection for each test class that isn't decorated with <see cref="T:Xunit.CollectionAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerClassTestCollectionFactory.#ctor(Xunit.Abstractions.ITestAssembly,Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerClassTestCollectionFactory" /> class.
            </summary>
            <param name="testAssembly">The assembly info.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
        </member>
        <member name="P:Xunit.Sdk.CollectionPerClassTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerClassTestCollectionFactory.Get(Xunit.Abstractions.ITypeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ExecutionErrorTestCase">
            <summary>
            A simple implementation of <see cref="T:Xunit.Sdk.IXunitTestCase"/> that can be used to report an error
            rather than running a test.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExecutionErrorTestCase.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.ExecutionErrorTestCase.#ctor(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ExecutionErrorTestCase"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="defaultMethodDisplay">Default method display to use (when not customized).</param>
            <param name="testMethod">The test method.</param>
            <param name="errorMessage">The error message to report for the test.</param>
        </member>
        <member name="P:Xunit.Sdk.ExecutionErrorTestCase.ErrorMessage">
            <summary>
            Gets the error message that will be display when the test is run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExecutionErrorTestCase.RunAsync(Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ExecutionErrorTestCase.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ExecutionErrorTestCase.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ExecutionTimer">
            <summary>
            Measures and aggregates execution time of one or more actions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ExecutionTimer.Total">
            <summary>
            Returns the total time aggregated across all the actions.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExecutionTimer.Aggregate(System.Action)">
            <summary>
            Executes an action and aggregates its run time into the total.
            </summary>
            <param name="action">The action to measure.</param>
        </member>
        <member name="M:Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes an asynchronous action and aggregates its run time into the total.
            </summary>
            <param name="asyncAction">The action to measure.</param>
        </member>
        <member name="M:Xunit.Sdk.ExecutionTimer.Aggregate(System.TimeSpan)">
            <summary>
            Aggregates a time span into the total time.
            </summary>
            <param name="time">The time to add.</param>
        </member>
        <member name="T:Xunit.Sdk.FactDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCaseDiscoverer"/> that supports finding test cases
            on methods decorated with <see cref="T:Xunit.FactAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.FactDiscoverer.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.FactDiscoverer"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
        </member>
        <member name="P:Xunit.Sdk.FactDiscoverer.DiagnosticMessageSink">
            <summary>
            Gets the message sink used to report <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> messages.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.FactDiscoverer.CreateTestCase(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Creates a single <see cref="T:Xunit.Sdk.XunitTestCase"/> for the given test method.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method.</param>
            <param name="factAttribute">The attribute that decorates the test method.</param>
            <returns></returns>
        </member>
        <member name="M:Xunit.Sdk.FactDiscoverer.Discover(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Discover test cases from a test method. By default, if the method is generic, or
            it contains arguments, returns a single <see cref="T:Xunit.Sdk.ExecutionErrorTestCase"/>;
            otherwise, it returns the result of calling <see cref="M:Xunit.Sdk.FactDiscoverer.CreateTestCase(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)"/>.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="factAttribute">The fact attribute attached to the test method.</param>
            <returns>Returns zero or more test cases represented by the test method.</returns>
        </member>
        <member name="T:Xunit.Sdk.ExecutionErrorTestCaseRunner">
            <summary>
            An implementation of <see cref="T:Xunit.Sdk.TestCaseRunner`1"/> to support <see cref="T:Xunit.Sdk.ExecutionErrorTestCase"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExecutionErrorTestCaseRunner.#ctor(Xunit.Sdk.ExecutionErrorTestCase,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ExecutionErrorTestCaseRunner"/> class.
            </summary>
            <param name="testCase">The test case that the lambda represents.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="M:Xunit.Sdk.ExecutionErrorTestCaseRunner.RunTestAsync">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyRunner`1">
            <summary>
            A base class that provides default behavior when running tests in an assembly. It groups the tests
            by test collection, and then runs the individual test collections.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.#ctor(Xunit.Abstractions.ITestAssembly,System.Collections.Generic.IEnumerable{`0},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyRunner`1"/> class.
            </summary>
            <param name="testAssembly">The assembly that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="diagnosticMessageSink">The message sink to report diagnostic messages to.</param>
            <param name="executionMessageSink">The message sink to report run status to.</param>
            <param name="executionOptions">The user's requested execution options.</param>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collect exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.ExecutionOptions">
            <summary>
            Gets or sets the user's requested execution options.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.DiagnosticMessageSink">
            <summary>
            Gets or sets the message sink to report diagnostic messages to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.ExecutionMessageSink">
            <summary>
            Gets or sets the message sink to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.TestAssembly">
            <summary>
            Gets or sets the assembly that contains the tests to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.TestCaseOrderer">
            <summary>
            Gets or sets the test case orderer that will be used to decide how to order the tests.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.TestCollectionOrderer">
            <summary>
            Gets or sets the test collection orderer that will be used to decide how to order the test collections.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyRunner`1.TestCases">
            <summary>
            Gets or sets the test cases to be run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.GetTestFrameworkDisplayName">
            <summary>
            Override this to provide the display name for the test framework (f.e., "xUnit.net 2.0").
            This value is placed into <see cref="P:Xunit.Abstractions.ITestAssemblyStarting.TestFrameworkDisplayName"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.GetTestFrameworkEnvironment">
            <summary>
            Override this to provide the environment information (f.e., "32-bit .NET 4.0"). This value is
            placed into <see cref="P:Xunit.Abstractions.ITestAssemblyStarting.TestEnvironment"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.AfterTestAssemblyStartingAsync">
            <summary>
            This method is called just after <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/> is sent, but before any test collections are run.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestAssemblyRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.BeforeTestAssemblyFinishedAsync">
            <summary>
            This method is called just before <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/> is sent.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestAssemblyRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.CreateMessageBus">
            <summary>
            Creates the message bus to be used for test execution. By default, it inspects
            the options for the <see cref="F:TestOptionsNames.Execution.SynchronousMessageReporting"/>
            flag, and if present, creates a message bus that ensures all messages are delivered
            on the same thread.
            </summary>
            <returns>The message bus.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.OrderTestCollections">
            <summary>
            Orders the test collections using the <see cref="P:Xunit.Sdk.TestAssemblyRunner`1.TestCollectionOrderer"/>.
            </summary>
            <returns>Test collections (and the associated test cases) in run order</returns>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.RunAsync">
            <summary>
            Runs the tests in the test assembly.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus,System.Threading.CancellationTokenSource)">
            <summary>
            Runs the list of test collections. By default, groups the tests by collection and runs them synchronously.
            </summary>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyRunner`1.RunTestCollectionAsync(Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationTokenSource)">
            <summary>
            Override this method to run the tests in an individual test collection.
            </summary>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCollection">The test collection that is being run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="T:Xunit.Sdk.TestCaseRunner`1">
            <summary>
            A base class that provides default behavior when running test cases.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestCaseRunner`1.#ctor(`0,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseRunner`1"/> class.
            </summary>
            <param name="testCase">The test case to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.TestCaseRunner`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collect exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseRunner`1.CancellationTokenSource">
            <summary>
            Gets or sets the task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseRunner`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseRunner`1.TestCase">
            <summary>
            Gets or sets the test case to be run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseRunner`1.AfterTestCaseStartingAsync">
            <summary>
            This method is called just after <see cref="T:Xunit.Abstractions.ITestCaseStarting"/> is sent, but before any test collections are run.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestCaseRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseRunner`1.BeforeTestCaseFinishedAsync">
            <summary>
            This method is called just before <see cref="T:Xunit.Abstractions.ITestCaseFinished"/> is sent.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestCaseRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseRunner`1.RunAsync">
            <summary>
            Runs the tests in the test case.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestCaseRunner`1.RunTestAsync">
            <summary>
            Override this method to run the tests in an individual test method.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="T:Xunit.Sdk.TestClassRunner`1">
            <summary>
            A base class that provides default behavior when running tests in a test class. It groups the tests
            by test method, and then runs the individual test methods.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.#ctor(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{`0},Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassRunner`1"/> class.
            </summary>
            <param name="testClass">The test class to be run.</param>
            <param name="class">The test class that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collect exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.CancellationTokenSource">
            <summary>
            Gets or sets the task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.Class">
            <summary>
            Gets or sets the CLR class that contains the tests to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.DiagnosticMessageSink">
            <summary>
            Gets the message sink used to send diagnostic messages.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.TestCaseOrderer">
            <summary>
            Gets or sets the test case orderer that will be used to decide how to order the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.TestCases">
            <summary>
            Gets or sets the test cases to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassRunner`1.TestClass">
            <summary>
            Gets or sets the test class to be run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.CreateTestClassConstructorArguments">
            <summary>
            Creates the arguments for the test class constructor. Attempts to resolve each parameter
            individually, and adds an error when the constructor arguments cannot all be provided.
            If the class is static, does not look for constructor, since one will not be needed.
            </summary>
            <returns>The test class constructor arguments.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.FormatConstructorArgsMissingMessage(System.Reflection.ConstructorInfo,System.Collections.Generic.IReadOnlyList{System.Tuple{System.Int32,System.Reflection.ParameterInfo}})">
            <summary>
            Gets the message to be used when the constructor is missing arguments.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.AfterTestClassStartingAsync">
            <summary>
            This method is called just after <see cref="T:Xunit.Abstractions.ITestClassStarting"/> is sent, but before any test methods are run.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestClassRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.BeforeTestClassFinishedAsync">
            <summary>
            This method is called just before <see cref="T:Xunit.Abstractions.ITestClassFinished"/> is sent.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestClassRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.RunAsync">
            <summary>
            Runs the tests in the test class.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync">
            <summary>
            Runs the list of test methods. By default, orders the tests, groups them by method and runs them synchronously.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.RunTestMethodAsync(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{`0},System.Object[])">
            <summary>
            Override this method to run the tests in an individual test method.
            </summary>
            <param name="testMethod">The test method that contains the test cases.</param>
            <param name="method">The CLR method that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="constructorArguments">The constructor arguments that will be used to create the test class.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.SelectTestClassConstructor">
            <summary>
            Selects the constructor to be used for the test class. By default, chooses the parameterless
            constructor. Override to change the constructor selection logic.
            </summary>
            <returns>The constructor to be used for creating the test class.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestClassRunner`1.TryGetConstructorArgument(System.Reflection.ConstructorInfo,System.Int32,System.Reflection.ParameterInfo,System.Object@)">
            <summary>
            Tries to supply a test class constructor argument. By default, always fails. Override to
            change the argument lookup logic.
            </summary>
            <param name="constructor">The constructor that will be used to create the test class.</param>
            <param name="index">The parameter index.</param>
            <param name="parameter">The parameter information.</param>
            <param name="argumentValue">The argument value that should be used for the parameter.</param>
            <returns>Returns <c>true</c> if the argument was supplied; <c>false</c>, otherwise.</returns>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionRunner`1">
            <summary>
            A base class that provides default behavior when running tests in a test collection. It groups the tests
            by test class, and then runs the individual test classes.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.#ctor(Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{`0},Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionRunner`1"/> class.
            </summary>
            <param name="testCollection">The test collection that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collect exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.CancellationTokenSource">
            <summary>
            Gets or sets the task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.TestCaseOrderer">
            <summary>
            Gets or sets the test case orderer that will be used to decide how to order the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.TestCases">
            <summary>
            Gets or sets the test cases to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionRunner`1.TestCollection">
            <summary>
            Gets or sets the test collection that contains the tests to be run.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.AfterTestCollectionStartingAsync">
            <summary>
            This method is called just after <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/> is sent, but before any test classes are run.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestCollectionRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.BeforeTestCollectionFinishedAsync">
            <summary>
            This method is called just before <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/> is sent.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestCollectionRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.RunAsync">
            <summary>
            Runs the tests in the test collection.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync">
            <summary>
            Runs the list of test classes. By default, groups the tests by class and runs them synchronously.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionRunner`1.RunTestClassAsync(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Override this method to run the tests in an individual test class.
            </summary>
            <param name="testClass">The test class to be run.</param>
            <param name="class">The CLR class that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="T:Xunit.Sdk.TestInvoker`1">
            <summary>
            A base class that provides default behavior to invoke a test method. This includes
            support for async test methods (both "async Task" and "async void") as well as
            creation and disposal of the test class.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestInvoker`1.#ctor(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestInvoker`1"/> class.
            </summary>
            <param name="test">The test that this invocation belongs to.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testClass">The test class that the test method belongs to.</param>
            <param name="constructorArguments">The arguments to be passed to the test class constructor.</param>
            <param name="testMethod">The test method that will be invoked.</param>
            <param name="testMethodArguments">The arguments to be passed to the test method.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collect exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.CancellationTokenSource">
            <summary>
            Gets or sets the task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.ConstructorArguments">
            <summary>
            Gets or sets the constructor arguments used to construct the test class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.DisplayName">
            <summary>
            Gets the display name of the invoked test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.Test">
            <summary>
            Gets or sets the test to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.TestCase">
            <summary>
            Gets the test case to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.TestClass">
            <summary>
            Gets or sets the runtime type of the class that contains the test method.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.TestMethod">
            <summary>
            Gets or sets the runtime method of the method that contains the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.TestMethodArguments">
            <summary>
            Gets or sets the arguments to pass to the test method when it's being invoked.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestInvoker`1.Timer">
            <summary>
            Gets or sets the object which measures execution time.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestInvoker`1.CreateTestClass">
            <summary>
            Creates the test class, unless the test method is static or there have already been errors. Note that
            this method times the creation of the test class (using <see cref="P:Xunit.Sdk.TestInvoker`1.Timer"/>). It is also responsible for
            sending the <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/>and <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/>
            messages, so if you override this method without calling the base, you are responsible for all of this behavior.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestInvoker`1.Aggregator"/>.
            </summary>
            <returns>The class instance, if appropriate; <c>null</c>, otherwise</returns>
        </member>
        <member name="M:Xunit.Sdk.TestInvoker`1.AfterTestMethodInvokedAsync">
            <summary>
            This method is called just after the test method has finished executing.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestInvoker`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestInvoker`1.BeforeTestMethodInvokedAsync">
            <summary>
            This method is called just before the test method is invoked.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestInvoker`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestInvoker`1.CallTestMethod(System.Object)">
            <summary>
            This method calls the test method via reflection. This is an available override point
            if you need to do some other form of invocation of the actual test method.
            </summary>
            <param name="testClassInstance">The instance of the test class</param>
            <returns>The return value from the test method invocation</returns>
        </member>
        <member name="M:Xunit.Sdk.TestInvoker`1.GetTaskFromResult(System.Object)">
            <summary>
            Given an object, will determine if it is an instance of <see cref="T:System.Threading.Tasks.Task"/> (in which case, it is
            directly returned), or an instance of <see cref="T:Microsoft.FSharp.Control.FSharpAsync`1"/>
            (in which case it is converted), or neither (in which case <c>null</c> is returned).
            </summary>
            <param name="obj">The object to convert</param>
        </member>
        <member name="M:Xunit.Sdk.TestInvoker`1.RunAsync">
            <summary>
            Creates the test class (if necessary), and invokes the test method.
            </summary>
            <returns>Returns the time (in seconds) spent creating the test class, running
            the test, and disposing of the test class.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(System.Object)">
            <summary>
            Invokes the test method on the given test class instance. This method sets up support for "async void"
            test methods, ensures that the test method has the correct number of arguments, then calls <see cref="M:Xunit.Sdk.TestInvoker`1.CallTestMethod(System.Object)"/>
            to do the actual method invocation. It ensure that any async test method is fully completed before returning, and
            returns the measured clock time that the invocation took.
            </summary>
            <param name="testClassInstance">The test class instance</param>
            <returns>Returns the time taken to invoke the test method</returns>
        </member>
        <member name="T:Xunit.Sdk.TestMethodRunner`1">
            <summary>
            A base class that provides default behavior when running tests in a test method.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.#ctor(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IReflectionTypeInfo,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{`0},Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodRunner`1"/> class.
            </summary>
            <param name="testMethod">The test method under test.</param>
            <param name="class">The CLR class that contains the test method.</param>
            <param name="method">The CLR method that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collect exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.CancellationTokenSource">
            <summary>
            Gets or sets the task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.Class">
            <summary>
            Gets or sets the CLR class that contains the test method.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.Method">
            <summary>
            Gets or sets the CLR method that contains the tests to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.TestCases">
            <summary>
            Gets or sets the test cases to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodRunner`1.TestMethod">
            <summary>
            Gets or sets the test method that contains the test cases.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.AfterTestMethodStarting">
            <summary>
            This method is called just after <see cref="T:Xunit.Abstractions.ITestMethodStarting"/> is sent, but before any test cases are run.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestMethodRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.BeforeTestMethodFinished">
            <summary>
            This method is called just before <see cref="T:Xunit.Abstractions.ITestMethodFinished"/> is sent.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestMethodRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.RunAsync">
            <summary>
            Runs the tests in the test method.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync">
            <summary>
            Runs the list of test cases. By default, it runs the cases in order, synchronously.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestMethodRunner`1.RunTestCaseAsync(`0)">
            <summary>
            Override this method to run an individual test case.
            </summary>
            <param name="testCase">The test case to be run.</param>
            <returns>Returns summary information about the test case run.</returns>
        </member>
        <member name="T:Xunit.Sdk.TestRunner`1">
            <summary>
            A base class that provides default behavior when running a test. This includes support
            for skipping tests.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestRunner`1.#ctor(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.String,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestRunner`1"/> class.
            </summary>
            <param name="test">The test that this invocation belongs to.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testClass">The test class that the test method belongs to.</param>
            <param name="constructorArguments">The arguments to be passed to the test class constructor.</param>
            <param name="testMethod">The test method that will be invoked.</param>
            <param name="testMethodArguments">The arguments to be passed to the test method.</param>
            <param name="skipReason">The skip reason, if the test is to be skipped.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.Aggregator">
            <summary>
            Gets or sets the exception aggregator used to run code and collect exceptions.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.CancellationTokenSource">
            <summary>
            Gets or sets the task cancellation token source, used to cancel the test run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.ConstructorArguments">
            <summary>
            Gets or sets the constructor arguments used to construct the test class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.DisplayName">
            <summary>
            Gets or sets the display name of the invoked test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.MessageBus">
            <summary>
            Gets or sets the message bus to report run status to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.SkipReason">
            <summary>
            Gets or sets the skip reason for the test, if set.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.Test">
            <summary>
            Gets or sets the test to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.TestCase">
            <summary>
            Gets the test case to be run.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.TestClass">
            <summary>
            Gets or sets the runtime type of the class that contains the test method.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.TestMethod">
            <summary>
            Gets or sets the runtime method of the method that contains the test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestRunner`1.TestMethodArguments">
            <summary>
            Gets or sets the arguments to pass to the test method when it's being invoked.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestRunner`1.AfterTestStarting">
            <summary>
            This method is called just after <see cref="T:Xunit.Abstractions.ITestStarting"/> is sent, but before the test class is created.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestRunner`1.BeforeTestFinished">
            <summary>
            This method is called just before <see cref="T:Xunit.Abstractions.ITestFinished"/> is sent.
            This method should NEVER throw; any exceptions should be placed into the <see cref="P:Xunit.Sdk.TestRunner`1.Aggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestRunner`1.RunAsync">
            <summary>
            Runs the test.
            </summary>
            <returns>Returns summary information about the test that was run.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestRunner`1.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)">
            <summary>
            Override this method to invoke the test.
            </summary>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <returns>Returns a tuple which includes the execution time (in seconds) spent running the
            test method, and any output that was returned by the test.</returns>
        </member>
        <member name="T:Xunit.Sdk.XunitTestAssemblyRunner">
            <summary>
            The test assembly runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.#ctor(Xunit.Abstractions.ITestAssembly,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestAssemblyRunner"/> class.
            </summary>
            <param name="testAssembly">The assembly that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="diagnosticMessageSink">The message sink to report diagnostic messages to.</param>
            <param name="executionMessageSink">The message sink to report run status to.</param>
            <param name="executionOptions">The user's requested execution options.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.GetTestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.GetTestFrameworkEnvironment">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.SetupSyncContext(System.Int32)">
            <summary>
            Gets the synchronization context used when potentially running tests in parallel.
            If <paramref name="maxParallelThreads"/> is greater than 0, it creates
            and uses an instance of <see cref="T:Xunit.Sdk.MaxConcurrencySyncContext"/>.
            </summary>
            <param name="maxParallelThreads">The maximum number of parallel threads.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.Initialize">
            <summary>
            Ensures the assembly runner is initialized (sets up the collection behavior,
            parallelization options, and test orderers from their assembly attributes).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.AfterTestAssemblyStartingAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.BeforeTestAssemblyFinishedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionsAsync(Xunit.Sdk.IMessageBus,System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync(Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCaseRunner">
            <summary>
            The test case runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCaseRunner.#ctor(Xunit.Sdk.IXunitTestCase,System.String,System.String,System.Object[],System.Object[],Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestCaseRunner"/> class.
            </summary>
            <param name="testCase">The test case to be run.</param>
            <param name="displayName">The display name of the test case.</param>
            <param name="skipReason">The skip reason, if the test is to be skipped.</param>
            <param name="constructorArguments">The arguments to be passed to the test class constructor.</param>
            <param name="testMethodArguments">The arguments to be passed to the test method.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCaseRunner.BeforeAfterAttributes">
            <summary>
            Gets the list of <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>s that will be used for this test case.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCaseRunner.ConstructorArguments">
            <summary>
            Gets or sets the arguments passed to the test class constructor
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCaseRunner.DisplayName">
            <summary>
            Gets or sets the display name of the test case
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCaseRunner.SkipReason">
            <summary>
            Gets or sets the skip reason for the test, if set.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCaseRunner.TestClass">
            <summary>
            Gets or sets the runtime type for the test class that the test method belongs to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCaseRunner.TestMethod">
            <summary>
            Gets of sets the runtime method for the test method that the test case belongs to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCaseRunner.TestMethodArguments">
            <summary>
            Gets or sets the arguments to pass to the test method when it's being invoked.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCaseRunner.CreateTest(Xunit.Sdk.IXunitTestCase,System.String)">
            <summary>
            Creates the <see cref="T:Xunit.Abstractions.ITest"/> instance for the given test case.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCaseRunner.CreateTestRunner(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.String,System.Collections.Generic.IReadOnlyList{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Creates the test runner used to run the given test.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCaseRunner.GetBeforeAfterTestAttributes">
            <summary>
            Gets the list of <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> attributes that apply to this test case.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCaseRunner.RunTestAsync">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestClassRunner">
            <summary>
            The test class runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.#ctor(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestClassRunner"/> class.
            </summary>
            <param name="testClass">The test class to be run.</param>
            <param name="class">The test class that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="collectionFixtureMappings">The mapping of collection fixture types to fixtures.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestClassRunner.ClassFixtureMappings">
            <summary>
            Gets the fixture mappings that were created during <see cref="M:Xunit.Sdk.XunitTestClassRunner.AfterTestClassStartingAsync"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestClassRunner.InitializedAsyncFixtures">
            <summary>
            Gets the already initialized async fixtures <see cref="M:Xunit.Sdk.XunitTestClassRunner.CreateClassFixtureAsync(System.Type)"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.CreateClassFixture(System.Type)">
            <summary>
            Creates the instance of a class fixture type to be used by the test class. If the fixture can be created,
            it should be placed into the <see cref="P:Xunit.Sdk.XunitTestClassRunner.ClassFixtureMappings"/> dictionary; if it cannot, then the method
            should record the error by calling <code>Aggregator.Add</code>.
            </summary>
            <param name="fixtureType">The type of the fixture to be created</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.FormatConstructorArgsMissingMessage(System.Reflection.ConstructorInfo,System.Collections.Generic.IReadOnlyList{System.Tuple{System.Int32,System.Reflection.ParameterInfo}})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.AfterTestClassStartingAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.BeforeTestClassFinishedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.SelectTestClassConstructor">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestClassRunner.TryGetConstructorArgument(System.Reflection.ConstructorInfo,System.Int32,System.Reflection.ParameterInfo,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCollectionRunner">
            <summary>
            The test collection runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.#ctor(Xunit.Abstractions.ITestCollection,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ITestCaseOrderer,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestCollectionRunner"/> class.
            </summary>
            <param name="testCollection">The test collection that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCollectionRunner.CollectionFixtureMappings">
            <summary>
            Gets the fixture mappings that were created during <see cref="M:Xunit.Sdk.XunitTestCollectionRunner.AfterTestCollectionStartingAsync"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.AfterTestCollectionStartingAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.BeforeTestCollectionFinishedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.CreateCollectionFixture(System.Type)">
            <summary>
            Creates the instance of a collection fixture type to be used by the test collection. If the fixture can be created,
            it should be placed into the <see cref="P:Xunit.Sdk.XunitTestCollectionRunner.CollectionFixtureMappings"/> dictionary; if it cannot, then the method
            should record the error by calling <code>Aggregator.Add</code>.
            </summary>
            <param name="fixtureType">The type of the fixture to be created</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.GetTestCaseOrderer">
            <summary>
            Gives an opportunity to override test case orderer. By default, this method gets the
            orderer from the collection definition. If this function returns <c>null</c>, the
            test case orderer passed into the constructor will be used.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IReflectionTypeInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestInvoker">
            <summary>
            The test invoker for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestInvoker.#ctor(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.Collections.Generic.IReadOnlyList{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestInvoker"/> class.
            </summary>
            <param name="test">The test that this invocation belongs to.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testClass">The test class that the test method belongs to.</param>
            <param name="constructorArguments">The arguments to be passed to the test class constructor.</param>
            <param name="testMethod">The test method that will be invoked.</param>
            <param name="testMethodArguments">The arguments to be passed to the test method.</param>
            <param name="beforeAfterAttributes">The list of <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>s for this test invocation.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestInvoker.BeforeAfterAttributes">
            <summary>
            Gets the list of <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>s for this test invocation.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestInvoker.BeforeTestMethodInvokedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestInvoker.AfterTestMethodInvokedAsync">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestMethodRunner">
            <summary>
            The test method runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestMethodRunner.#ctor(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IReflectionTypeInfo,Xunit.Abstractions.IReflectionMethodInfo,System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestMethodRunner"/> class.
            </summary>
            <param name="testMethod">The test method to be run.</param>
            <param name="class">The test class that contains the test method.</param>
            <param name="method">The test method that contains the tests to be run.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages to.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="constructorArguments">The constructor arguments for the test class.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestRunner">
            <summary>
            The test runner for xUnit.net v2 tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestRunner.#ctor(Xunit.Abstractions.ITest,Xunit.Sdk.IMessageBus,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.String,System.Collections.Generic.IReadOnlyList{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestRunner"/> class.
            </summary>
            <param name="test">The test that this invocation belongs to.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testClass">The test class that the test method belongs to.</param>
            <param name="constructorArguments">The arguments to be passed to the test class constructor.</param>
            <param name="testMethod">The test method that will be invoked.</param>
            <param name="testMethodArguments">The arguments to be passed to the test method.</param>
            <param name="skipReason">The skip reason, if the test is to be skipped.</param>
            <param name="beforeAfterAttributes">The list of <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>s for this test.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestRunner.BeforeAfterAttributes">
            <summary>
            Gets the list of <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/>s for this test.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)">
            <summary>
            Override this method to invoke the test method.
            </summary>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <returns>Returns the execution time (in seconds) spent running the test method.</returns>
        </member>
        <member name="T:Xunit.Sdk.XunitTheoryTestCaseRunner">
            <summary>
            The test case runner for xUnit.net v2 theories (which could not be pre-enumerated;
            pre-enumerated test cases use <see cref="T:Xunit.Sdk.XunitTestCaseRunner"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCaseRunner.#ctor(Xunit.Sdk.IXunitTestCase,System.String,System.String,System.Object[],Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTheoryTestCaseRunner"/> class.
            </summary>
            <param name="testCase">The test case to be run.</param>
            <param name="displayName">The display name of the test case.</param>
            <param name="skipReason">The skip reason, if the test is to be skipped.</param>
            <param name="constructorArguments">The arguments to be passed to the test class constructor.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTheoryTestCaseRunner.DiagnosticMessageSink">
            <summary>
            Gets the message sink used to report <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> messages.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCaseRunner.AfterTestCaseStartingAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCaseRunner.BeforeTestCaseFinishedAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCaseRunner.RunTestAsync">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssembly">
            <summary>
            The default implementation of <see cref="T:Xunit.Abstractions.ITestAssembly"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssembly.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TestAssembly.#ctor(Xunit.Abstractions.IAssemblyInfo,System.String,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssembly"/> class.
            </summary>
            <param name="assembly">The test assembly.</param>
            <param name="configFileName">The optional configuration filename (defaults to the
            configuration file of the current app domain if not provided)</param>
            <param name="version">The version number of the assembly (defaults to "0.0.0.0")</param>
        </member>
        <member name="P:Xunit.Sdk.TestAssembly.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssembly.ConfigFileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssembly.Version">
            <summary>
            Gets or sets the assembly version.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssembly.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestAssembly.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestClass">
            <summary>
            The default implementation of <see cref="T:Xunit.Abstractions.ITestClass"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClass.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TestClass.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.ITypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClass"/> class.
            </summary>
            <param name="testCollection">The test collection the class belongs to</param>
            <param name="class">The test class</param>
        </member>
        <member name="P:Xunit.Sdk.TestClass.Class">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClass.TestCollection">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestClass.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestClass.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestClassComparer">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:Xunit.Abstractions.ITestClass"/>.
            Compares the fully qualified names of the types.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestClassComparer.Instance">
            <summary>
            The singleton instance of the comparer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassComparer.Equals(Xunit.Abstractions.ITestClass,Xunit.Abstractions.ITestClass)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestClassComparer.GetHashCode(Xunit.Abstractions.ITestClass)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollection">
            <summary>
            The default implementation of <see cref="T:Xunit.Abstractions.ITestCollection"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollection.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TestCollection.#ctor(Xunit.Abstractions.ITestAssembly,Xunit.Abstractions.ITypeInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollection"/> class.
            </summary>
            <param name="testAssembly">The test assembly the collection belongs to</param>
            <param name="collectionDefinition">The optional type which contains the collection definition</param>
            <param name="displayName">The display name for the test collection</param>
        </member>
        <member name="P:Xunit.Sdk.TestCollection.CollectionDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollection.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollection.TestAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollection.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestCollection.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestCollection.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionComparer">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:Xunit.Abstractions.ITestCollection"/>.
            Compares the IDs of the test collections.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestCollectionComparer.Instance">
            <summary>
            The singleton instance of the comparer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionComparer.Equals(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.ITestCollection)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionComparer.GetHashCode(Xunit.Abstractions.ITestCollection)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionFactoryHelper">
            <summary>
            A helper class that gets the list of test collection definitions for a given assembly.
            Reports any misconfigurations of the test assembly via the diagnostic message sink.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionFactoryHelper.GetTestCollectionDefinitions(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.IMessageSink)">
            <summary>
            Gets the test collection definitions for the given assembly.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <returns>A list of mappings from test collection name to test collection definitions (as <see cref="T:Xunit.Abstractions.ITypeInfo"/></returns>
        </member>
        <member name="T:Xunit.Sdk.TestFramework">
            <summary>
            A default implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/> that tracks objects to be
            disposed when the framework is disposed. The discoverer and executor are automatically
            tracked for disposal, since those interfaces mandate an implementation of <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFramework"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
        </member>
        <member name="P:Xunit.Sdk.TestFramework.DiagnosticMessageSink">
            <summary>
            Gets the message sink used to send diagnostic messages.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFramework.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFramework.SourceInformationProvider">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.CreateDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Override this method to provide the implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/>.
            </summary>
            <param name="assemblyInfo">The assembly that is being discovered.</param>
            <returns>Returns the test framework discoverer.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.CreateExecutor(System.Reflection.AssemblyName)">
            <summary>
            Override this method to provide the implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/>.
            </summary>
            <param name="assemblyName">The assembly that is being executed.</param>
            <returns>Returns the test framework executor.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.GetDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFramework.GetExecutor(System.Reflection.AssemblyName)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkDiscoverer">
            <summary>
            A base implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> that supports test filtering
            and runs the discovery process on a thread pool thread.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkDiscoverer"/> class.
            </summary>
            <param name="assemblyInfo">The test assembly.</param>
            <param name="sourceProvider">The source information provider.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.AssemblyInfo">
            <summary>
            Gets the assembly that's being discovered.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.DiagnosticMessageSink">
            <summary>
            Gets the message sink used to report diagnostic messages.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework discoverer.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.SourceProvider">
            <summary>
            Get the source code information provider used during discovery.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.TargetFramework">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkDiscoverer.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.CreateTestClass(Xunit.Abstractions.ITypeInfo)">
            <summary>
            Implement this method to create a test class for the given CLR type.
            </summary>
            <param name="class">The CLR type.</param>
            <returns>The test class.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.Find(System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.Find(System.String,System.Boolean,Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.FindTestsForType(Xunit.Abstractions.ITestClass,System.Boolean,Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Core implementation to discover unit tests in a given test class.
            </summary>
            <param name="testClass">The test class.</param>
            <param name="includeSourceInformation">Set to <c>true</c> to attempt to include source information.</param>
            <param name="messageBus">The message sink to send discovery messages to.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
            <returns>Returns <c>true</c> if discovery should continue; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.IsValidTestClass(Xunit.Abstractions.ITypeInfo)">
            <summary>
            Determines if a type should be used for discovery. Can be used to filter out types that
            are not desirable. The default implementation filters out abstract (non-static) classes.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns <c>true</c> if the type can contain tests; <c>false</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.ReportDiscoveredTestCase(Xunit.Abstractions.ITestCase,System.Boolean,Xunit.Sdk.IMessageBus)">
            <summary>
            Reports a discovered test case to the message bus, after updating the source code information
            (if desired).
            </summary>
            <param name="testCase"></param>
            <param name="includeSourceInformation"></param>
            <param name="messageBus"></param>
            <returns></returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkDiscoverer.Serialize(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkExecutor`1">
            <summary>
            A reusable implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/> which contains the basic behavior
            for running tests.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Abstractions.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.#ctor(System.Reflection.AssemblyName,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFrameworkExecutor`1"/> class.
            </summary>
            <param name="assemblyName">Name of the test assembly.</param>
            <param name="sourceInformationProvider">The source line number information provider.</param>
            <param name="diagnosticMessageSink">The message sink to report diagnostic messages to.</param>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkExecutor`1.AssemblyInfo">
            <summary>
            Gets the assembly information of the assembly under test.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkExecutor`1.DiagnosticMessageSink">
            <summary>
            Gets the message sink to send diagnostic messages to.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkExecutor`1.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework discoverer.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkExecutor`1.SourceInformationProvider">
            <summary>
            Gets the source information provider.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.CreateDiscoverer">
            <summary>
            Override to create a test framework discoverer that can be used to discover
            tests when the user asks to run all test.
            </summary>
            <returns>The test framework discoverer</returns>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.RunAll(Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.RunTests(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkExecutor`1.RunTestCases(System.Collections.Generic.IEnumerable{`0},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <summary>
            Override to run test cases.
            </summary>
            <param name="testCases">The test cases to be run.</param>
            <param name="executionMessageSink">The message sink to report run status to.</param>
            <param name="executionOptions">The user's requested execution options.</param>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkProxy">
            <summary>
            This class proxies for the real implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/>, based on
            whether the user has overridden the choice via <see cref="T:Xunit.TestFrameworkAttribute"/>. If
            no attribute is found, defaults to <see cref="T:Xunit.Sdk.XunitTestFramework"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFrameworkProxy"/> class.
            </summary>
            <param name="testAssemblyObject">The test assembly (expected to implement <see cref="T:Xunit.Abstractions.IAssemblyInfo"/>).</param>
            <param name="sourceInformationProviderObject">The source information provider (expected to implement <see cref="T:Xunit.Abstractions.ISourceInformationProvider"/>).</param>
            <param name="diagnosticMessageSinkObject">The diagnostic message sink (expected to implement <see cref="T:Xunit.Abstractions.IMessageSink"/>).</param>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkProxy.InnerTestFramework">
            <summary>
            Gets the test framework that's being wrapped by the proxy.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFrameworkProxy.SourceInformationProvider">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.GetDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.GetExecutor(System.Reflection.AssemblyName)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkProxy.MessageSinkWrapper">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestFrameworkProxy.MessageSinkWrapper.InnerSink">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.MessageSinkWrapper.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkProxy.MessageSinkWrapper.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.TestMethod">
            <summary>
            The default implementation of <see cref="T:Xunit.Abstractions.ITestMethod"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethod.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TestMethod.#ctor(Xunit.Abstractions.ITestClass,Xunit.Abstractions.IMethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethod"/> class.
            </summary>
            <param name="class">The test class</param>
            <param name="method">The test method</param>
        </member>
        <member name="P:Xunit.Sdk.TestMethod.Method">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethod.TestClass">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestMethod.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestMethod.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodComparer">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:Xunit.Abstractions.ITestMethod"/>.
            Compares the names of the methods.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.TestMethodComparer.Instance">
            <summary>
            The singleton instance of the comparer.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodComparer.Equals(Xunit.Abstractions.ITestMethod,Xunit.Abstractions.ITestMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestMethodComparer.GetHashCode(Xunit.Abstractions.ITestMethod)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodTestCase">
            <summary>
            A base class implementation of <see cref="T:Xunit.Abstractions.ITestCase"/> which is based on test cases being
            related directly to test methods.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.#ctor">
            <summary>
            Used for de-serialization.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.#ctor(Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodTestCase"/> class.
            </summary>
            <param name="defaultMethodDisplay">Default method display to use (when not customized).</param>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="testMethodArguments">The arguments for the test method.</param>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.BaseDisplayName">
            <summary>
            Returns the base display name for a test ("TestClassName.MethodName").
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.DefaultMethodDisplay">
            <summary>
            Returns the default method display to use (when not customized).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.Method">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.MethodGenericTypes">
            <summary>
            Gets the generic types that were used to close the generic test method, if
            applicable; <c>null</c>, if the test method was not an open generic.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.SkipReason">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.SourceInformation">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.TestMethod">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.TestMethodArguments">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodTestCase.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.EnsureInitialized">
            <summary>
            Call to ensure the object is fully initialized().
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.GetUniqueID">
            <summary>
            Gets the unique ID for the test case.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.BytesToHexString(System.Byte[])">
            <summary>Converts an array of bytes to its hexadecimal value as a string.</summary>
            <param name="bytes">The bytes.</param>
            <returns>A string containing the hexadecimal representation of the provided bytes.</returns>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.NibbleToHexChar(System.Int32)">
            <summary>Gets a hexadecimal digit character from the 4-bit value.</summary>
            <param name="b">A value in the range [0, 15].</param>
            <returns>A character in the range ['0','9'] or ['a','f'].</returns>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.Initialize">
            <summary>
            Called when initializing the test cases, either after constructor or de-serialization.
            Override this method to add additional initialization-time work.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestMethodTestCase.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestOutputHelper">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestOutputHelper"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestOutputHelper.Output">
            <summary>
            Gets the output provided by the test.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestOutputHelper.Initialize(Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITest)">
            <summary>
            Initialize the test output helper with information about a test.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestOutputHelper.Uninitialize">
            <summary>
            Resets the test output helper to its uninitialized state.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestOutputHelper.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestOutputHelper.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TheoryDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCaseDiscoverer"/> that supports finding test cases
            on methods decorated with <see cref="T:Xunit.TheoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TheoryDiscoverer"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
        </member>
        <member name="P:Xunit.Sdk.TheoryDiscoverer.DiagnosticMessageSink">
            <summary>
            Gets the message sink to be used to send diagnostic messages.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCaseForDataRow(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[])">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCasesForDataRow(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[])">
            <summary>
            Creates test cases for a single row of data. By default, returns a single instance of <see cref="T:Xunit.Sdk.XunitTestCase"/>
            with the data row inside of it.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="theoryAttribute">The theory attribute attached to the test method.</param>
            <param name="dataRow">The row of data for this test case.</param>
            <returns>The test cases</returns>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCaseForSkip(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCasesForSkip(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.String)">
            <summary>
            Creates test cases for a skipped theory. By default, returns a single instance of <see cref="T:Xunit.Sdk.XunitTestCase"/>
            (which inherently discovers the skip reason via the fact attribute).
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="theoryAttribute">The theory attribute attached to the test method.</param>
            <param name="skipReason">The skip reason that decorates <paramref name="theoryAttribute"/>.</param>
            <returns>The test cases</returns>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCaseForTheory(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCasesForTheory(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Creates test cases for the entire theory. This is used when one or more of the theory data items
            are not serializable, or if the user has requested to skip theory pre-enumeration. By default,
            returns a single instance of <see cref="T:Xunit.Sdk.XunitTheoryTestCase"/>, which performs the data discovery
            at runtime.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="theoryAttribute">The theory attribute attached to the test method.</param>
            <returns>The test case</returns>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCaseForSkippedDataRow(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[],System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCasesForSkippedDataRow(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[],System.String)">
            <summary>
            Creates test cases for a single row of skipped data. By default, returns a single instance of <see cref="T:Xunit.Sdk.XunitSkippedDataRowTestCase"/>
            with the data row inside of it.
            </summary>
            <remarks>If this method is overridden, the implementation will have to override <see cref="P:Xunit.Sdk.TestMethodTestCase.SkipReason"/> otherwise
            the default behavior will look at the <see cref="T:Xunit.TheoryAttribute"/> and the test case will not be skipped.</remarks>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="theoryAttribute">The theory attribute attached to the test method.</param>
            <param name="dataRow">The row of data for this test case.</param>
            <param name="skipReason">The reason this test case is to be skipped</param>
            <returns>The test cases</returns>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.Discover(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Discover test cases from a test method.
            </summary>
            <remarks>
            This method performs the following steps:
            - If the theory attribute is marked with Skip, returns the single test case from <see cref="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCaseForSkip(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.String)"/>;
            - If pre-enumeration is off, or any of the test data is non serializable, returns the single test case from <see cref="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCaseForTheory(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo)"/>;
            - If there is no theory data, returns a single test case of <see cref="T:Xunit.Sdk.ExecutionErrorTestCase"/> with the error in it;
            - Otherwise, it returns one test case per data row, created by calling <see cref="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCaseForDataRow(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[])"/> or <see cref="M:Xunit.Sdk.TheoryDiscoverer.CreateTestCaseForSkippedDataRow(Xunit.Abstractions.ITestFrameworkDiscoveryOptions,Xunit.Abstractions.ITestMethod,Xunit.Abstractions.IAttributeInfo,System.Object[],System.String)"/> if the data attribute has a skip reason.
            </remarks>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="theoryAttribute">The theory attribute attached to the test method.</param>
            <returns>Returns zero or more test cases represented by the test method.</returns>
        </member>
        <member name="T:Xunit.Sdk.XunitSkippedDataRowTestCase">
            <summary>
            Represents a test case that had a valid data row, but the data row was generated by a data attribute with the skip property set.
            </summary>
            <remarks>This class is only ever used if the discoverer is pre-enumerating theories and the data row is serializable.</remarks>
        </member>
        <member name="M:Xunit.Sdk.XunitSkippedDataRowTestCase.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.XunitSkippedDataRowTestCase.#ctor(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitSkippedDataRowTestCase"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="defaultMethodDisplay">Default method display to use (when not customized).</param>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="skipReason">The reason that this test case will be skipped</param>
            <param name="testMethodArguments">The arguments for the test method.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitSkippedDataRowTestCase.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitSkippedDataRowTestCase.GetSkipReason(Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitSkippedDataRowTestCase.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTest">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.ITest"/> for xUnit v2.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTest.#ctor(Xunit.Sdk.IXunitTestCase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTest"/> class.
            </summary>
            <param name="testCase">The test case this test belongs to.</param>
            <param name="displayName">The display name for this test.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTest.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTest.TestCase">
            <summary>
            Gets the xUnit v2 test case.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTest.Xunit#Abstractions#ITest#TestCase">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCase">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IXunitTestCase"/> for xUnit v2 that supports tests decorated with
            both <see cref="T:Xunit.FactAttribute"/> and <see cref="T:Xunit.TheoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.#ctor(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestCase"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="defaultMethodDisplay">Default method display to use (when not customized).</param>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="testMethodArguments">The arguments for the test method.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.DiagnosticMessageSink">
            <summary>
            Gets the message sink used to report <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/> messages.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetDisplayName(Xunit.Abstractions.IAttributeInfo,System.String)">
            <summary>
            Gets the display name for the test case. Calls <see cref="M:Xunit.Sdk.TypeUtility.GetDisplayNameWithArguments(Xunit.Abstractions.IMethodInfo,System.String,System.Object[],Xunit.Abstractions.ITypeInfo[])"/>
            with the given base display name (which is itself either derived from <see cref="P:Xunit.FactAttribute.DisplayName"/>,
            falling back to <see cref="P:Xunit.Sdk.TestMethodTestCase.BaseDisplayName"/>.
            </summary>
            <param name="factAttribute">The fact attribute the decorated the test case.</param>
            <param name="displayName">The base display name from <see cref="P:Xunit.Sdk.TestMethodTestCase.BaseDisplayName"/>.</param>
            <returns>The display name for the test case.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetSkipReason(Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Gets the skip reason for the test case. By default, pulls the skip reason from the
            <see cref="P:Xunit.FactAttribute.Skip"/> property.
            </summary>
            <param name="factAttribute">The fact attribute the decorated the test case.</param>
            <returns>The skip reason, if skipped; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.RunAsync(Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFramework">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/> that supports discovery and
            execution of unit tests linked against xunit.core.dll, using xunit.execution.dll.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFramework.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFramework"/> class.
            </summary>
            <param name="messageSink">The message sink used to send diagnostic messages</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFramework.CreateDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFramework.CreateExecutor(System.Reflection.AssemblyName)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFrameworkDiscoverer">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> that supports discovery
            of unit tests linked against xunit.core.dll, using xunit.execution.dll.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.XunitTestFrameworkDiscoverer.DisplayName">
            <summary>
            Gets the display name of the xUnit.net v2 test framework.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink,Xunit.Sdk.IXunitTestCollectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkDiscoverer"/> class.
            </summary>
            <param name="assemblyInfo">The test assembly.</param>
            <param name="sourceProvider">The source information provider.</param>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="collectionFactory">The test collection factory used to look up test collections.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestFrameworkDiscoverer.DiscovererTypeCache">
            <summary>
            Gets the mapping dictionary of fact attribute type to discoverer type.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestFrameworkDiscoverer.TestCollectionFactory">
            <summary>
            Gets the test collection factory that makes test collections.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.CreateTestClass(Xunit.Abstractions.ITypeInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.FindTestsForMethod(Xunit.Abstractions.ITestMethod,System.Boolean,Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <summary>
            Finds the tests on a test method.
            </summary>
            <param name="testMethod">The test method.</param>
            <param name="includeSourceInformation">Set to <c>true</c> to indicate that source information should be included.</param>
            <param name="messageBus">The message bus to report discovery messages to.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
            <returns>Return <c>true</c> to continue test discovery, <c>false</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.FindTestsForType(Xunit.Abstractions.ITestClass,System.Boolean,Xunit.Sdk.IMessageBus,Xunit.Abstractions.ITestFrameworkDiscoveryOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.GetDiscoverer(System.Type)">
            <summary>
            Gets the test case discover instance for the given discoverer type. The instances are cached
            and reused, since they should not be stateful.
            </summary>
            <param name="discovererType">The discoverer type.</param>
            <returns>Returns the test case discoverer instance.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.Serialize(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFrameworkExecutor">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/> that supports execution
            of unit tests linked against xunit.core.dll, using xunit.execution.dll.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.#ctor(System.Reflection.AssemblyName,Xunit.Abstractions.ISourceInformationProvider,Xunit.Abstractions.IMessageSink)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkExecutor"/> class.
            </summary>
            <param name="assemblyName">Name of the test assembly.</param>
            <param name="sourceInformationProvider">The source line number information provider.</param>
            <param name="diagnosticMessageSink">The message sink to report diagnostic messages to.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestFrameworkExecutor.TestAssembly">
            <summary>
            Gets the test assembly that contains the test.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.CreateDiscoverer">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.RunTestCases(System.Collections.Generic.IEnumerable{Xunit.Sdk.IXunitTestCase},Xunit.Abstractions.IMessageSink,Xunit.Abstractions.ITestFrameworkExecutionOptions)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTheoryTestCase">
            <summary>
            Represents a test case which runs multiple tests for theory data, either because the
            data was not enumerable or because the data was not serializable.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.#ctor(Xunit.Abstractions.IMessageSink,Xunit.Sdk.TestMethodDisplay,Xunit.Abstractions.ITestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTheoryTestCase"/> class.
            </summary>
            <param name="diagnosticMessageSink">The message sink used to send diagnostic messages</param>
            <param name="defaultMethodDisplay">Default method display to use (when not customized).</param>
            <param name="testMethod">The method under test.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.RunAsync(Xunit.Abstractions.IMessageSink,Xunit.Sdk.IMessageBus,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc />
        </member>
        <member name="T:Xunit.Sdk.MaxConcurrencySyncContext">
            <summary>
            An implementation of <see cref="T:System.Threading.SynchronizationContext"/> which runs work on custom threads
            rather than in the thread pool, and limits the number of in-flight actions.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencySyncContext.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.MaxConcurrencySyncContext"/> class.
            </summary>
            <param name="maximumConcurrencyLevel">The maximum number of tasks to run at any one time.</param>
        </member>
        <member name="P:Xunit.Sdk.MaxConcurrencySyncContext.IsSupported">
            <summary>
            Gets a flag indicating whether maximum concurrency is supported.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencySyncContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencySyncContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.MaxConcurrencySyncContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.MessageBus">
            <summary>
            This is an internal class, and is not intended to be called from end-user code.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.#ctor(Xunit.Abstractions.IMessageSink,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.Dispose">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageBus">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IMessageBus" /> that delegates to another implementation of
            <see cref="T:Xunit.Sdk.IMessageBus" /> while calling into a callback for each message.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus.#ctor(Xunit.Sdk.IMessageBus,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageBus"/> class.
            </summary>
            <param name="innerMessageBus">The message bus to delegate to.</param>
            <param name="callback">The callback to send messages to.</param>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageBus`1">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IMessageBus" /> that delegates to another implementation of
            <see cref="T:Xunit.Sdk.IMessageBus" /> while calling into a callback for each message. In addition,
            it issues a <see cref="P:Xunit.Sdk.DelegatingMessageBus`1.Finished" /> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus`1.#ctor(Xunit.Sdk.IMessageBus,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageSink`1" /> class.
            </summary>
            <param name="innerMessageBus">The message bus to delegate to.</param>
            <param name="callback">The callback to send messages to.</param>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageBus`1.FinalMessage">
            <summary>
            The final message that was seen that caused <see cref="P:Xunit.Sdk.DelegatingMessageBus`1.Finished"/> to be triggered.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageBus`1.Finished">
            <summary>
            An event that is triggered when a message of type <typeparamref name="TFinalMessage" /> is seen.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageBus`1.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageSink">
            <summary>
            Implementation of <see cref="T:Xunit.Abstractions.IMessageSink" /> that delegates to another implementation of
            <see cref="T:Xunit.Abstractions.IMessageSink" /> while calling into a callback for each message.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink.#ctor(Xunit.Abstractions.IMessageSink,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageSink"/> class.
            </summary>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageSink`1">
            <summary>
            Implementation of <see cref="T:Xunit.Abstractions.IMessageSink" /> that delegates to another implementation of
            <see cref="T:Xunit.Abstractions.IMessageSink" /> while calling into a callback for each message. In addition,
            it issues a <see cref="P:Xunit.Sdk.DelegatingMessageSink`1.Finished" /> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink`1.#ctor(Xunit.Abstractions.IMessageSink,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageSink" /> class.
            </summary>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageSink`1.FinalMessage">
            <summary>
            The final message that was seen that caused <see cref="P:Xunit.Sdk.DelegatingMessageSink`1.Finished"/> to be triggered.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageSink`1.Finished">
            <summary>
            An event that is triggered when a message of type <typeparamref name="TFinalMessage" /> is seen.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink`1.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionAssemblyInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionAssemblyInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAssemblyInfo"/> class.
            </summary>
            <param name="assembly">The assembly to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAssemblyInfo"/> class.
            </summary>
            <param name="assemblyFileName">The assembly to be wrapped.</param>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.AssemblyPath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.Name">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetTypes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionAttributeInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionAttributeInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.#ctor(System.Reflection.CustomAttributeData)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAttributeInfo"/> class.
            </summary>
            <param name="attribute">The attribute to be wrapped.</param>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAttributeInfo.Attribute">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAttributeInfo.AttributeData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetConstructorArguments">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetNamedArgument``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionMethodInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionMethodInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionMethodInfo"/> class.
            </summary>
            <param name="method">The method to be wrapped.</param>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsAbstract">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsGenericMethodDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsPublic">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsStatic">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.MethodInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.ReturnType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.GetGenericArguments">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.MakeGenericMethod(Xunit.Abstractions.ITypeInfo[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.GetParameters">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionParameterInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionParameterInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionParameterInfo.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionParameterInfo"/> class.
            </summary>
            <param name="parameterInfo">The parameter to be wrapped.</param>
        </member>
        <member name="P:Xunit.Sdk.ReflectionParameterInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionParameterInfo.ParameterInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionParameterInfo.ParameterType">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionTypeInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionTypeInfo"/> class.
            </summary>
            <param name="type">The type to wrap.</param>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.BaseType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Interfaces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsAbstract">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsGenericParameter">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsGenericType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsSealed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsValueType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Type">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetGenericArguments">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetMethod(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetMethods(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.Reflector">
            <summary>
            Wrapper to implement types from xunit.abstractions.dll using reflection.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.Reflector.ConvertArguments(System.Object[],System.Type[])">
            <summary>
            Converts arguments into their target types. Can be particularly useful when pulling attribute
            constructor arguments, whose types may not strictly match the parameter types.
            </summary>
            <param name="args">The arguments to be converted.</param>
            <param name="types">The target types for the conversion.</param>
            <returns>The converted arguments.</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.Assembly)">
            <summary>
            Converts an <see cref="T:System.Reflection.Assembly"/> into an <see cref="T:Xunit.Abstractions.IReflectionAssemblyInfo"/>.
            </summary>
            <param name="assembly">The assembly to wrap.</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.CustomAttributeData)">
            <summary>
            Converts an <see cref="T:System.Attribute"/> into an <see cref="T:Xunit.Abstractions.IAttributeInfo"/> using reflection.
            </summary>
            <param name="attribute">The attribute to wrap.</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.MethodInfo)">
            <summary>
            Converts a <see cref="T:System.Reflection.MethodInfo"/> into an <see cref="T:Xunit.Abstractions.IMethodInfo"/> using reflection.
            </summary>
            <param name="method">The method to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.ParameterInfo)">
            <summary>
            Converts a <see cref="T:System.Reflection.ParameterInfo"/> into an <see cref="T:Xunit.Abstractions.IParameterInfo"/> using reflection.
            </summary>
            <param name="parameter">THe parameter to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Type)">
            <summary>
            Converts a <see cref="T:System.Type"/> into an <see cref="T:Xunit.Abstractions.ITypeInfo"/> using reflection.
            </summary>
            <param name="type">The type to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="T:Xunit.Sdk.SynchronousMessageBus">
            <summary>
            This is an internal class, and is not intended to be called from end-user code.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SynchronousMessageBus.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.SynchronousMessageBus.Dispose">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.SynchronousMessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseBulkDeserializer">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseBulkDeserializer.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseDescriptorFactory">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseDescriptorFactory.#ctor(System.Object,System.Object,System.Object)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.TestClassException">
            <summary>
            Represents an exception that happened during the process of a test class. This typically
            means there were problems identifying the correct test class constructor, or problems
            creating the fixture data for the test class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Xunit.Sdk.TestClassException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestDiscoveryVisitor.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.TestDiscoveryVisitor.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkTypeDiscoverer">
            <summary>
            The implementation of <see cref="T:Xunit.Sdk.ITestFrameworkTypeDiscoverer"/> that supports attributes
            of type <see cref="T:Xunit.Sdk.TestFrameworkDiscovererAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkTypeDiscoverer.GetTestFrameworkType(Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TraitHelper">
            <summary>
            A helper class to retrieve the traits from a method.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TraitHelper.GetTraits(System.Reflection.MemberInfo)">
            <summary>
            Get the traits from a method.
            </summary>
            <param name="member">The member (method, field, etc.) to get the traits for.</param>
            <returns>A list of traits that are defined on the method.</returns>
        </member>
        <member name="T:Xunit.Sdk.TypeUtility">
            <summary>
            Extension methods for <see cref="T:Xunit.Abstractions.ITypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.ConvertToSimpleTypeName(Xunit.Abstractions.ITypeInfo)">
            <summary>
            Converts a type into a name string.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>Name string of type.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.ResolveMethodArguments(System.Reflection.MethodBase,System.Object[])">
            <summary>
            Resolves argument values for the test method, including support for optional method
            arguments.
            </summary>
            <param name="testMethod">The test method to resolve.</param>
            <param name="arguments">The user-supplied method arguments.</param>
            <returns>The argument values</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.GetDisplayNameWithArguments(Xunit.Abstractions.IMethodInfo,System.String,System.Object[],Xunit.Abstractions.ITypeInfo[])">
            <summary>
            Formulates the extended portion of the display name for a test method. For tests with no arguments, this will
            return just the base name; for tests with arguments, attempts to format the arguments and appends the argument
            list to the test name.
            </summary>
            <param name="method">The test method</param>
            <param name="baseDisplayName">The base part of the display name</param>
            <param name="arguments">The test method arguments</param>
            <param name="genericTypes">The test method's generic types</param>
            <returns>The full display name for the test method</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.ResolveGenericParameter(Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.ITypeInfo,System.Type,System.Type@)">
            <summary>
            Resolves an individual generic type given an intended generic parameter type and the type of an object passed to that type.
            </summary>
            <param name="genericType">The generic type, e.g. T, to resolve.</param>
            <param name="methodParameterType">The non-generic or open generic type, e.g. T, to try to match with the type of the object passed to that type.</param>
            <param name="passedParameterType">The non-generic or closed generic type, e.g. string, used to resolve the method parameter.</param>
            <param name="resultType">The resolved type, e.g. the parameters (T, T, string, typeof(object)) -> (T, T, string, typeof(string)).</param>
            <returns>True if resolving was successful, else false.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.GetArrayElementTypeOrThis(System.Type)">
            <summary>
            Gets the ElementType of a type, only if it is an array.
            </summary>
            <param name="type">The type to get the ElementType of.</param>
            <returns>If type is an array, the ElementType of the type, else the original type.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.StripElementType(Xunit.Abstractions.ITypeInfo,System.Boolean@)">
            <summary>
            Gets the underlying ElementType of a type, if the ITypeInfo supports reflection.
            </summary>
            <param name="type">The type to get the ElementType of.</param>
            <param name="isArray">A flag indicating whether the type is an array.</param>
            <returns>If type has an element type, underlying ElementType of a type, else the original type.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.ResolveMismatchedGenericArguments(Xunit.Abstractions.ITypeInfo,System.Type,Xunit.Abstractions.ITypeInfo[],System.Type@)">
            <summary>
            Resolves an individual generic type given an intended generic parameter type and the type of an object passed to that type. 
            </summary>
            <param name="genericType">The generic type, e.g. T, to resolve.</param>
            <param name="passedParameterType">The non-generic or closed generic type, e.g. string, used to resolve the method parameter.</param>
            <param name="methodGenericTypeArguments">The generic arguments of the open generic type to match with the passed parameter.</param>
            <param name="resultType">The resolved type.</param>
            <returns>True if resolving was successful, else false.</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.ResolveGenericType(Xunit.Abstractions.ITypeInfo,System.Object[],Xunit.Abstractions.IParameterInfo[])">
            <summary>
            Resolves a generic type for a test method. The test parameters (and associated parameter infos) are
            used to determine the best matching generic type for the test method that can be satisfied by all
            the generic parameters and their values.
            </summary>
            <param name="genericType">The generic type to be resolved</param>
            <param name="parameters">The parameter values being passed to the test method</param>
            <param name="parameterInfos">The parameter infos for the test method</param>
            <returns>The best matching generic type</returns>
        </member>
        <member name="M:Xunit.Sdk.TypeUtility.ResolveGenericTypes(Xunit.Abstractions.IMethodInfo,System.Object[])">
            <summary>
            Resolves all the generic types for a test method. The test parameters are used to determine
            the best matching generic types for the test method that can be satisfied by all
            the generic parameters and their values.
            </summary>
            <param name="method">The test method</param>
            <param name="parameters">The parameter values being passed to the test method</param>
            <returns>The best matching generic types</returns>
        </member>
        <member name="T:Xunit.Sdk.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.GeneralDigest.CopyIn(Xunit.Sdk.GeneralDigest)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.GeneralDigest.Update(System.Byte)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.GeneralDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.GeneralDigest.Finish">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.GeneralDigest.Reset">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.GeneralDigest.GetByteLength">
            <summary/>
        </member>
        <member name="P:Xunit.Sdk.GeneralDigest.AlgorithmName">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.GeneralDigest.GetDigestSize">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.GeneralDigest.DoFinal(System.Byte[],System.Int32)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.Sha1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endianness" of the word processing!
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.Sha1Digest.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.Sha1Digest.#ctor(Xunit.Sdk.Sha1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="P:Xunit.Sdk.Sha1Digest.AlgorithmName">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.Sha1Digest.GetDigestSize">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.Sha1Digest.DoFinal(System.Byte[],System.Int32)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.Sha1Digest.Reset">
            reset the chaining variables
        </member>
        <member name="M:Xunit.Sdk.Sha1Digest.Reset(Xunit.Sdk.Sha1Digest)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.ExceptionUtility">
            <summary>
            Utility classes for dealing with Exception objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.CombineMessages(Xunit.Abstractions.IFailureInformation)">
            <summary>
            Combines multiple levels of messages into a single message.
            </summary>
            <param name="failureInfo">The failure information from which to get the messages.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.CombineStackTraces(Xunit.Abstractions.IFailureInformation)">
            <summary>
            Combines multiple levels of stack traces into a single stack trace.
            </summary>
            <param name="failureInfo">The failure information from which to get the stack traces.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.ConvertExceptionToFailureInformation(System.Exception)">
            <summary>
            Unwraps exceptions and their inner exceptions.
            </summary>
            <param name="ex">The exception to be converted.</param>
            <returns>The failure information.</returns>
        </member>
        <member name="T:Xunit.Sdk.NullMessageSink">
            <summary>
            An implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> and <see cref="T:Xunit.IMessageSinkWithTypes"/> that
            ignores all messages.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.NullMessageSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.NullMessageSink.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.NullMessageSink.OnMessageWithTypes(Xunit.Abstractions.IMessageSinkMessage,System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.SerializationHelper">
            <summary>
            Serializes and de-serializes objects
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Deserialize``1(System.String)">
            <summary>
            De-serializes an object.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="serializedValue">The object's serialized value</param>
            <returns>The de-serialized object</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Serialize(System.Object)">
            <summary>
            Serializes an object.
            </summary>
            <param name="value">The value to serialize</param>
            <returns>The serialized value</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.IsSerializable(System.Object)">
            <summary>Gets whether the specified <paramref name="value"/> is serializable with <see cref="M:Xunit.Sdk.SerializationHelper.Serialize(System.Object)"/>.</summary>
            <param name="value">The object to test for serializability.</param>
            <returns>true if the object can be serialized; otherwise, false.</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.GetType(System.String)">
            <summary>
            Converts an assembly qualified type name into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyQualifiedTypeName">The assembly qualified type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.GetType(System.String,System.String)">
            <summary>
            Converts an assembly name + type name into a <see cref="T:System.Type"/> object.
            </summary>
            <param name="assemblyName">The assembly name.</param>
            <param name="typeName">The type name.</param>
            <returns>The instance of the <see cref="T:System.Type"/>, if available; <c>null</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.GetTypeNameForSerialization(System.Type)">
            <summary>
            Gets an assembly qualified type name for serialization, with special dispensation for types which
            originate in the execution assembly.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.SubstringTrim(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from the string, with whitespace trimmed on both ends.
            </summary>
            <param name="str">The string.</param>
            <param name="startIndex">The starting index.</param>
            <param name="length">The length.</param>
            <returns>
            A substring starting no earlier than startIndex and ending no later
            than startIndex + length.
            </returns>
        </member>
        <member name="T:Xunit.Sdk.SourceInformation">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ISourceInformation"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.SourceInformation.FileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.SourceInformation.LineNumber">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.SourceInformation.Serialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.SourceInformation.Deserialize(Xunit.Abstractions.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AfterTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IAfterTestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AfterTestFinished.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AfterTestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AfterTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AfterTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IAfterTestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.AfterTestStarting.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AfterTestStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AfterTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyMessage"/> and <see cref="T:Xunit.Abstractions.IExecutionMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyMessage.#ctor(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestAssembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyMessage.TestAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyMessage.TestCases">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseMessage.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseMessage.TestCase">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestClassMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassMessage.#ctor(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestClass)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassMessage.TestClass">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionMessage.#ctor(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionMessage.TestCollection">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMessage.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMessage.Test">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodMessage.#ctor(Xunit.Abstractions.ITestCase,Xunit.Abstractions.ITestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodMessage.TestMethod">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestResultMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestResultMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestResultMessage.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestResultMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestResultMessage.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestResultMessage.Output">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.BeforeTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IBeforeTestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.BeforeTestFinished.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.BeforeTestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.BeforeTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.BeforeTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IBeforeTestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.BeforeTestStarting.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.BeforeTestStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.BeforeTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DiagnosticMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IDiagnosticMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DiagnosticMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DiagnosticMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DiagnosticMessage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DiagnosticMessage"/> class.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:Xunit.Sdk.DiagnosticMessage.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DiagnosticMessage"/> class.
            </summary>
            <param name="format">The format of the message to send</param>
            <param name="args">The arguments used to format the message</param>
        </member>
        <member name="P:Xunit.Sdk.DiagnosticMessage.InterfaceTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.DiagnosticMessage.Message">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DiscoveryCompleteMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IDiscoveryCompleteMessage"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ErrorMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IErrorMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ErrorMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ErrorMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ErrorMessage.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ErrorMessage"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.TestCases">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.TestAssemblyCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyFinished.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestAssemblyStarting.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestAssembly,System.DateTime,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestAssemblyStarting"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.TestEnvironment">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseCleanupFailure.#ctor(Xunit.Abstractions.ITestCase,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseCleanupFailure.#ctor(Xunit.Abstractions.ITestCase,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseDiscoveryMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseDiscoveryMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseDiscoveryMessage.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseDiscoveryMessage"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestCaseFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseFinished.#ctor(Xunit.Abstractions.ITestCase,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseStarting.#ctor(Xunit.Abstractions.ITestCase)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCaseStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestClassConstructionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassConstructionFinished.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassConstructionFinished"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassConstructionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassConstructionStarting.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassConstructionStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassDisposeFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassDisposeFinished.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassDisposeFinished"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassDisposeStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassDisposeStarting.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassDisposeStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassFinished.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestClassStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassStarting.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestClass)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCleanupFailure.#ctor(Xunit.Abstractions.ITest,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCleanupFailure.#ctor(Xunit.Abstractions.ITest,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionFinished.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionStarting.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestCollectionStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestFailed">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestFailed"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFailed.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFailed"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFailed.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFailed"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFinished.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFinished.Output">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodCleanupFailure"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod,System.String[],System.String[],System.String[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodCleanupFailure.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassCleanupFailure"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodFinished"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodFinished.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodFinished"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestMethodStarting.#ctor(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.ITestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestMethodStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestOutput">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestOutput"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestOutput.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestOutput"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestOutput.Output">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestPassed">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestPassed"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestPassed.#ctor(Xunit.Abstractions.ITest,System.Decimal,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestPassed"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestSkipped">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestSkipped"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestSkipped.#ctor(Xunit.Abstractions.ITest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestSkipped"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestSkipped.Reason">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestStarting"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestStarting.#ctor(Xunit.Abstractions.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestStarting"/> class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ArgumentFormatter">
            <summary>
            Formats arguments for display in theories.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ArgumentFormatter.Format(System.Object)">
            <summary>
            Format the value for presentation.
            </summary>
            <param name="value">The value to be formatted.</param>
            <returns>The formatted value.</returns>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparer`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used by the xUnit.net equality assertions.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparer`1" /> class.
            </summary>
            <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparerAdapter`1">
            <summary>
            A class that wraps <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to create <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparerAdapter`1"/> class.
            </summary>
            <param name="innerComparer">The comparer that is being adapted.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.GetHashCode(System.Object)">
            <inheritdoc/>
        </member>
        <member name="F:Xunit.ExecutionHelper.SubstitutionToken">
            <summary>
            Gets the substitution token used as assembly name suffix to indicate that the assembly is
            a generalized reference to the platform-specific assembly.
            </summary>
        </member>
        <member name="T:Xunit.LongLivedMarshalByRefObject">
            <summary>
            Base class for all long-lived objects that may cross over an AppDomain.
            </summary>
        </member>
        <member name="M:Xunit.LongLivedMarshalByRefObject.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.LongLivedMarshalByRefObject"/> type.
            </summary>
        </member>
        <member name="M:Xunit.LongLivedMarshalByRefObject.DisconnectAll">
            <summary>
            Disconnects all remote objects.
            </summary>
        </member>
        <member name="M:Xunit.LongLivedMarshalByRefObject.InitializeLifetimeService">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Serialization.XunitSerializationInfo">
            <summary>
            A mirror class of the CLR's <see cref="T:System.Runtime.Serialization.SerializationInfo"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.#ctor(Xunit.Abstractions.IXunitSerializable)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Serialization.XunitSerializationInfo"/> class.
            </summary>
            <param name="object">The data to copy into the serialization info</param>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.AddValue(System.String,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.GetValue``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.GetValue(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.ToSerializedString">
            <summary>
            Returns BASE64 encoded string that represents the entirety of the data.
            </summary>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.SerializeTriple(Xunit.Serialization.XunitSerializationTriple)">
            <summary>
            Returns a triple for a key/value pair of data in a complex object
            </summary>
            <param name="triple">The triple to be serialized</param>
            <returns>The serialized version of the triple</returns>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.DeserializeTriple(System.String)">
            <summary>
            Returns the triple values out of a serialized triple.
            </summary>
            <param name="value">The serialized triple</param>
            <returns>The de-serialized triple</returns>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.Deserialize(System.Type,System.String)">
            <summary>
            De-serializes a value that was serialized with <see cref="T:Xunit.Serialization.XunitSerializationInfo"/>.
            </summary>
            <param name="type">The type of the object to de-serialize into</param>
            <param name="serializedValue">The serialized value</param>
            <returns>The de-serialized object</returns>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationInfo.Serialize(System.Object)">
            <summary>
            Serializes an object.
            </summary>
            <param name="value">The value to be serialized</param>
            <returns>The serialized object</returns>
        </member>
        <member name="T:Xunit.Serialization.XunitSerializationTriple">
            <summary>
            Represents a triple of information used when serializing complex types: the property name,
            the value to be serialized, and the value's type.
            </summary>
        </member>
        <member name="F:Xunit.Serialization.XunitSerializationTriple.Key">
            <summary>
            Gets the triple's key
            </summary>
        </member>
        <member name="F:Xunit.Serialization.XunitSerializationTriple.Value">
            <summary>
            Gets the triple's value
            </summary>
        </member>
        <member name="F:Xunit.Serialization.XunitSerializationTriple.Type">
            <summary>
            Gets the triple's value type
            </summary>
        </member>
        <member name="M:Xunit.Serialization.XunitSerializationTriple.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Serialization.XunitSerializationTriple"/> class.
            </summary>
            <param name="key">The triple's key</param>
            <param name="value">The triple's value</param>
            <param name="type">The triple's value type</param>
        </member>
        <member name="M:ExceptionExtensions.RethrowWithNoStackTraceLoss(System.Exception)">
            <summary>
            Rethrows an exception object without losing the existing stack trace information
            </summary>
            <param name="ex">The exception to re-throw.</param>
            <remarks>
            For more information on this technique, see
            http://www.dotnetjunkies.com/WebLog/chris.taylor/archive/2004/03/03/8353.aspx.
            The remote_stack_trace string is here to support Mono.
            </remarks>
        </member>
        <member name="M:ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwraps an exception to remove any wrappers, like <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="ex">The exception to unwrap.</param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="T:Guard">
            <summary>
            Guard class, used for guard clauses and argument validation
            </summary>
        </member>
        <member name="M:Guard.ArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentNotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentValid(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="T:NewReflectionExtensions">
            <summary>
            Methods which help bridge and contain the differences between Type and TypeInfo.
            </summary>
        </member>
    </members>
</doc>




<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
    </startup>
</configuration>
